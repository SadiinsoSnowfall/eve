Name                        │ Used │ ISA        │ Archs      │ Tag  │ Group                                                                          │ Is sequence │ Description
────────────────────────────┼──────┼────────────┼────────────┼──────┼────────────────────────────────────────────────────────────────────────────────┼─────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
vaddv_u16                   │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddv_u8                    │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_u16                  │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_u32                  │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_u64                  │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across vector
vaddlv_u8                   │ 1    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovn_u64                  │ 1    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vadd_u32                    │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_u64                   │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vpadd_u16                   │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadd_u32                   │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadd_u8                    │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddl_u8                   │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vpaddlq_u16                 │ 1    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vget_lane_u32               │ 1    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
svbic_z                     │ 1    │ sve        │ A64        │      │ Logical/AND-NOT                                                                │ maybe       │ <conflicted
svcompact                   │ 1    │ sve        │ A64        │      │ Predication/Element selection/Concatenate active elements                      │ no          │ <conflicted
svbrka_z                    │ 1    │ sve        │ A64        │      │ Predication/Partitioning/Break after first true condition                      │ no          │ Break after first true condition
svmla_lane                  │ 0    │ <multiple> │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svmls_lane                  │ 0    │ <multiple> │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svcmla_lane                 │ 0    │ <multiple> │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ maybe       │ <conflicted
svmul_lane                  │ 0    │ <multiple> │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
vcadd_rot270_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcadd_rot90_f32             │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcaddq_rot270_f32           │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcaddq_rot90_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcmla_f32                   │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot180_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot270_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot90_f32             │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_f32           │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_f32           │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_lane_f32              │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_laneq_f32             │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ yes         │ Floating-point Complex Multiply Accumulate
vcmla_rot180_lane_f32       │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcmla_rot180_laneq_f32      │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ yes         │ Floating-point Complex Multiply Accumulate
vcmla_rot270_lane_f32       │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot270_laneq_f32      │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ yes         │ Floating-point Complex Multiply Accumulate
vcmla_rot90_lane_f32        │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcmla_rot90_laneq_f32       │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ yes         │ Floating-point Complex Multiply Accumulate
vcmlaq_lane_f32             │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_laneq_f32            │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_lane_f32      │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_laneq_f32     │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_lane_f32      │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_laneq_f32     │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_lane_f32       │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_laneq_f32      │ 0    │ Neon       │ A32/A64    │      │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcvta_s32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvta_u32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtaq_s32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtaq_u32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtm_s32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtm_u32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmq_s32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmq_u32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtn_s32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtn_u32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnq_s32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnq_u32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtp_s32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtp_u32_f32               │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtpq_s32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtpq_u32_f32              │ 0    │ Neon       │ A32/A64    │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vdot_lane_s32               │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdot_lane_u32               │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vdot_s32                    │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdot_u32                    │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vdotq_lane_s32              │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdotq_lane_u32              │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vdotq_s32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdotq_u32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vsudot_lane_s32             │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.                                                                                                                                                                                                                                            
vsudotq_lane_s32            │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.                                                                                                                                                                                                                                            
vusdot_lane_s32             │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vusdot_s32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vusdotq_lane_s32            │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vmmlaq_s32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Matrix multiply                                              │ no          │ Signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of signed 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.                                                                                                                                                                               
vmmlaq_u32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Matrix multiply                                              │ no          │ Unsigned 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of unsigned 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.                                                                                                                                                                         
vusmmlaq_s32                │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Matrix multiply                                              │ no          │ Unsigned and signed 8-bit integer matrix multiply-accumulate. This instruction multiplies the 2x8 matrix of unsigned 8-bit integer values in the first source vector by the 8x2 matrix of signed 8-bit integer values in the second source vector. The resulting 2x2 32-bit integer matrix product is destructively added to the 32-bit integer matrix accumulator in the destination vector. This is equivalent to performing an 8-way dot product per destination element.                                                                                                                                                                
vmaxnm_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmaxnmq_f32                 │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vminnm_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminnmq_f32                 │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrnd_f32                    │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrnda_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndaq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndi_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndiq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndm_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndmq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndn_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndn_f64                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndnq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndnq_f64                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndns_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndp_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndpq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndq_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrndx_f32                   │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vrndxq_f32                  │ 0    │ Neon       │ A32/A64    │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vcvt_bf16_f32               │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.                                                                                                                                                                                                                                                                                                      
vcvt_f32_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                      
vcvtah_f32_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vcvth_bf16_f32              │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Floating-point convert from single-precision to BFloat16 format (scalar) converts the single-precision floating-point value in the 32-bit SIMD&FP source register to BFloat16 format and writes the result in the 16-bit SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                                      
vcvtq_high_bf16_f32         │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.                                                                                                                                                                                                                                                                                                      
vcvtq_high_f32_bf16         │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                      
vcvtq_low_bf16_f32          │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Floating-point convert from single-precision to BFloat16 format (vector) reads each single-precision element in the SIMD&FP source vector, converts each value to BFloat16 format, and writes the results in the lower or upper half of the SIMD&FP destination vector. The result elements are half the width of the source elements.                                                                                                                                                                                                                                                                                                      
vcvtq_low_f32_bf16          │ 0    │ Neon       │ A32/A64    │ bf16 │ Data type conversion/Conversions                                               │ no          │ Shift Left Long (by element size). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, left shifts each result by the element size, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                      
vld1_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_bf16_x2                │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_bf16_x4                │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_dup_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_bf16_x2               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_bf16_x4               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_dup_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_dup_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_dup_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vbfmlalbq_lane_f32          │ 0    │ Neon       │ A32/A64    │ bf16 │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vbfmlalbq_laneq_f32         │ 0    │ Neon       │ A32/A64    │ bf16 │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vbfmlaltq_lane_f32          │ 0    │ Neon       │ A32/A64    │ bf16 │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vbfmlaltq_laneq_f32         │ 0    │ Neon       │ A32/A64    │ bf16 │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vst1_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_bf16_x2                │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_bf16_x3                │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_bf16_x4                │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_bf16_x2               │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_bf16_x3               │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_bf16_x4               │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_bf16                   │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_bf16                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vbfdot_f32                  │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfdot_lane_f32             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfdot_laneq_f32            │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfdotq_f32                 │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfdotq_lane_f32            │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfdotq_laneq_f32           │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Dot product                                                  │ no          │ BFloat16 floating-point dot product (vector). This instruction delimits the source vectors into pairs of 16-bit BF16 elements. Within each pair, the elements in the first source vector are multiplied by the corresponding elements in the second source vector. The resulting single-precision products are then summed and added destructively to the single-precision element of the destination vector that aligns with the pair of BF16 values in the first source vector. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                           
vbfmmlaq_f32                │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Matrix multiply                                              │ no          │ BFloat16 floating-point matrix multiply-accumulate into 2x2 matrix. This instruction multiplies the 2x4 matrix of BF16 values held in the first 128-bit source vector by the 4x2 BF16 matrix in the second 128-bit source vector. The resulting 2x2 single-precision matrix product is then added destructively to the 2x2 single-precision matrix in the 128-bit destination vector. This is equivalent to performing a 4-way dot product per destination element. The instruction ignores the FPCR and does not update the FPSR exception status.                                                                                         
vbfmlalbq_f32               │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vbfmlaltq_f32               │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ BFloat16 floating-point widening multiply-add long (vector) widens the even-numbered (bottom) or odd-numbered (top) 16-bit elements in the first and second source vectors from Bfloat16 to single-precision format. The instruction then multiplies and adds these values to the overlapping single-precision elements of the destination vector.                                                                                                                                                                                                                                                                                          
vcombine_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Combine vectors                                            │ yes         │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_bf16                │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdup_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_laneq_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_bf16                 │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vduph_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vduph_laneq_bf16            │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_laneq_bf16            │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_bf16                │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set vector lane                                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vsetq_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Set vector lane                                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vget_high_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_lane_bf16              │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_bf16               │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vgetq_lane_bf16             │ 0    │ Neon       │ A32/A64    │ bf16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcagt_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcagtq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcage_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcageq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcalt_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcaltq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcale_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vcaleq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vceqz_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqzq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceq_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Equal to                                                               │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceqq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Equal to                                                               │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vcgt_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgtq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcge_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgeq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgez_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than or equal to zero                                          │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgezq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than or equal to zero                                          │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgtz_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than zero                                                      │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtzq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Greater than zero                                                      │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vclt_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcltq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcle_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal
vcleq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vclez_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than or equal to zero                                             │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vclezq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than or equal to zero                                             │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vcltz_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than zero                                                         │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltzq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Compare/Less than zero                                                         │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcadd_rot270_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcadd_rot90_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcaddq_rot270_f16           │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcaddq_rot90_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcmla_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot180_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot270_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot90_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcmlaq_rot180_f16           │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_f16           │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmla_lane_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcmla_laneq_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot180_lane_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot180_laneq_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot270_lane_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot270_laneq_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot90_lane_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmla_rot90_laneq_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_lane_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_laneq_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_lane_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_laneq_f16     │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_lane_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_laneq_f16     │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 
vcmlaq_rot90_lane_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_laneq_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Complex arithmetic/Complex multiply-accumulate by scalar                       │ no          │ Floating-point Complex Multiply Accumulate
vcvt_f16_s16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_f16_u16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_n_f16_s16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_n_f16_u16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_n_s16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_n_u16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvt_s16_f16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_u16_f16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvta_s16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvta_u16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtah_s32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtah_u32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtaq_s16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtaq_u16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvth_f16_s32               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_f16_u32               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_n_f16_s32             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_n_f16_u32             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_n_s32_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_n_u32_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvth_s32_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_u32_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtm_s16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtm_u16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmh_s32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmh_u32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmq_s16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmq_u16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtn_s16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtn_u16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnh_s32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnh_u32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnq_s16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnq_u16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtp_s16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtp_u16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtph_s32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtph_u32_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtpq_s16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtpq_u16_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtq_f16_s16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_f16_u16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_f16_s16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_n_f16_u16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_s16_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_n_u16_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtq_s16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_u16_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vneg_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vnegh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vnegq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vabd_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabdq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabs_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabsh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabsq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vadd_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vaddh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vaddq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vdivh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vmax_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmaxnm_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmaxnmh_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmaxnmq_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmaxq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmin_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vminnm_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminnmh_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminnmq_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vfma_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmah_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, adds the product to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                                
vfmaq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmlal_high_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlal_lane_high_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlal_lane_low_f16         │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlal_laneq_high_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlal_laneq_low_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlal_low_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_high_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_lane_high_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_lane_low_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_laneq_high_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_laneq_low_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlalq_low_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add Long to accumulator (vector). This instruction multiplies corresponding half-precision floating-point values in the vectors in the two source SIMD&FP registers, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                                  
vfmlsl_high_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlsl_lane_high_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlsl_lane_low_f16         │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlsl_laneq_high_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlsl_laneq_low_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlsl_low_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_high_f16            │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_lane_high_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_lane_low_f16        │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_laneq_high_f16      │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_laneq_low_f16       │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfmlslq_low_f16             │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract Long from accumulator (vector). This instruction negates the values in the vector of one SIMD&FP register, multiplies these with the corresponding values in another vector, and accumulates the product to the corresponding vector element of the destination SIMD&FP register. The instruction does not round the result of the multiply before the accumulation.                                                                                                                                                                                                                                 
vfms_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, negates the product, adds that to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                             
vfmsq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vmul_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_lane_f16               │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_n_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_lane_f16              │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_n_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vpadd_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpmax_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmin_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vrecpe_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpeq_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrsqrte_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrteq_f16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrts_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrsqrtsq_f16                │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrecps_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal step                                   │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpsq_f16                 │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal step                                   │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrnd_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrnda_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndah_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndaq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrndih_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndm_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndmh_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndmq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndn_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndnh_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndnq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to even (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                   
vrndp_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndph_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndpq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrndx_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vrndxh_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vrndxq_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vsqrth_f16                  │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vsub_f16                    │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsubh_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsubq_f16                   │ 0    │ Neon       │ A32/A64    │ fp16 │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vbsl_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vceq_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqz_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_p64                  │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vtst_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vldrq_p128                  │ 0    │ Neon       │ A32/A64    │ poly │ Load/Load                                                                      │ no          │ Load SIMD&FP Register (immediate offset). This instruction loads an element from memory, and writes the result as a scalar to the SIMD&FP register. The address that is used for the load is calculated from a base register value, a signed immediate offset, and an optional offset that is a multiple of the element size.                                                                                                                                                                                                                                                                                                               
vld1_dup_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p64_x2                 │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p64_x3                 │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p64_x4                 │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p64_x2                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p64_x3                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p64_x4                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_dup_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld3_dup_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld4_dup_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vsli_n_p64                  │ 0    │ Neon       │ A32/A64    │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_p64                 │ 0    │ Neon       │ A32/A64    │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsri_n_p64                  │ 0    │ Neon       │ A32/A64    │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_p64                 │ 0    │ Neon       │ A32/A64    │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vstrq_p128                  │ 0    │ Neon       │ A32/A64    │ poly │ Store/Store                                                                    │ no          │ Store SIMD&FP register (immediate offset). This instruction stores a single SIMD&FP register to memory. The address that is used for the store is calculated from a base register value and an immediate offset.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst1_lane_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p64_x2                 │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p64_x3                 │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p64_x4                 │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p64_x2                │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p64_x4                │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst3_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst4_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vmull_high_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                                               
vmull_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                                               
vcombine_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcopy_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_laneq_p64             │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopyq_lane_p64             │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_p64            │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_p64                 │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vget_lane_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vext_p64                    │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_p64                   │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vdup_lane_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_n_p64                  │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdupq_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_n_p64                 │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_p64              │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vget_high_p64               │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_p64                │ 0    │ Neon       │ A32/A64    │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vbsl_f64                    │ 0    │ Neon       │ A64        │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_f64                   │ 0    │ Neon       │ A64        │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vcagt_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcagtd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcagtq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcagts_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcage_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcaged_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcageq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcages_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcalt_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcaltd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcaltq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcalts_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vcale_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vcaled_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vcaleq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vcales_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vceq_f64                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceq_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqd_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceqd_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqd_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceqq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqs_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceqz_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqz_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqz_s16                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_s32                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_s8                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_u16                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_u32                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqz_u8                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqzd_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzd_u64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqzq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqzq_s16                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_s32                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_s8                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_u16                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_u32                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_u64                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_u8                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzs_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vtst_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstd_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstd_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vcgt_f64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgt_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtd_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgtd_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtd_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgtq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgts_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgtz_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtz_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtz_s16                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtz_s32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtz_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtz_s8                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtzd_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzq_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtzq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcgtzq_s16                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzq_s32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzq_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzq_s8                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                          
vcgtzs_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vcge_f64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcge_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcge_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcged_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcged_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcged_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcgeq_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgeq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcgeq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcges_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgez_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgez_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgez_s16                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgez_s32                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgez_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgez_s8                    │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgezd_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezq_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgezq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgezq_s16                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezq_s32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezq_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezq_s8                   │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                  
vcgezs_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vclt_f64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vclt_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vclt_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcltd_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcltd_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vcltd_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcltq_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcltq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vcltq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vclts_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcltz_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltz_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltz_s16                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltz_s32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltz_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltz_s8                    │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltzd_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzq_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltzq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcltzq_s16                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzq_s32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzq_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzq_s8                   │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Compare signed Less than zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                
vcltzs_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than                                                              │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcle_f64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vcle_s64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcle_u64                    │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcled_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal
vcled_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcled_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcleq_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vcleq_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcleq_u64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
vcles_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal
vclez_f32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclez_f64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vclez_s16                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclez_s32                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclez_s64                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclez_s8                    │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezd_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vclezd_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezq_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vclezq_f64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vclezq_s16                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezq_s32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezq_s64                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezq_s8                   │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed Less than or Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the signed integer value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                        
vclezs_f32                  │ 0    │ Neon       │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vcaddq_rot270_f64           │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcaddq_rot90_f64            │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex addition                                            │ no          │ Floating-point Complex Add
vcmlaq_f64                  │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot180_f64           │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot270_f64           │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcmlaq_rot90_f64            │ 0    │ Neon       │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ no          │ Floating-point Complex Multiply Accumulate
vcvt_f32_f64                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.                                                                                                                                                                             
vcvt_f64_f32                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&FP destination register.                                                                                                                                                                                                                                                                     
vcvt_f64_s64                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_f64_u64                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_high_f32_f64           │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.                                                                                                                                                                             
vcvt_high_f64_f32           │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&FP destination register.                                                                                                                                                                                                                                                                     
vcvt_n_f64_s64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_n_f64_u64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_n_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_n_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvt_s64_f64                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_u64_f64                │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvta_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvta_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtad_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtad_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtaq_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtaq_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtas_s32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtas_u32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtd_f64_s64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtd_f64_u64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtd_n_f64_s64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtd_n_f64_u64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtd_n_s64_f64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtd_n_u64_f64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtd_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtd_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtm_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtm_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmd_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmd_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmq_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmq_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtms_s32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtms_u32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtn_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtn_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnd_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnd_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnq_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnq_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtns_s32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtns_u32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtp_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtp_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtpd_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtpd_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtpq_s64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtpq_u64_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtps_s32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtps_u32_f32              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtq_f64_s64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_f64_u64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_f64_s64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_n_f64_u64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_s64_f64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_n_u64_f64             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtq_s64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_u64_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvts_f32_s32               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvts_f32_u32               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvts_n_f32_s32             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvts_n_f32_u32             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvts_n_s32_f32             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvts_n_u32_f32             │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvts_s32_f32               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvts_u32_f32               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtx_f32_f64               │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vcvtx_high_f32_f64          │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vcvtxd_f32_f64              │ 0    │ Neon       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow, rounding to odd (vector). This instruction reads each vector element in the source SIMD&FP register, narrows each value to half the precision of the source element using the Round to Odd rounding mode, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vld1_dup_f64                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f64                    │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f64_x2                 │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f64_x3                 │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f64_x4                 │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_f64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f64_x2                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f64_x3                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f64_x4                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_f64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_dup_f64                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_f64                    │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_lane_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_f64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_f64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_s64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_s8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_u64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_u8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_s64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_u64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_dup_f64                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_f64                    │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld3_lane_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_f64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_f64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_s64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_s8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_u64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_u8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_s64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_u64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_f64                │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_f64                    │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld4_lane_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_f64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_s64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_u64               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_f64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_f64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_s64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_s8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_u64              │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_u8               │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_s64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_u64                   │ 0    │ Neon       │ A64        │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vbcaxq_s16                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_s32                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_s64                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_s8                   │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_u16                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_u32                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_u64                  │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
vbcaxq_u8                   │ 0    │ Neon       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ no          │ Bit Clear and Exclusive OR performs a bitwise AND of the 128-bit vector in a source SIMD&FP register and the complement of the vector in another source SIMD&FP register, then performs a bitwise exclusive OR of the resulting vector and the vector in a third source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                        
veor3q_s16                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_s32                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_s64                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_s8                   │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_u16                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_u32                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_u64                  │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
veor3q_u8                   │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ Three-way Exclusive OR performs a three-way exclusive OR of the values in the three source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vxarq_u64                   │ 0    │ Neon       │ A64        │      │ Logical/Exclusive OR and rotate                                                │ no          │ Exclusive OR and Rotate performs a bitwise exclusive OR of the 128-bit vectors in the two source SIMD&FP registers, rotates each 64-bit element of the resulting 128-bit vector right by the value specified by a 6-bit immediate value, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                         
vneg_f64                    │ 0    │ Neon       │ A64        │      │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vneg_s64                    │ 0    │ Neon       │ A64        │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vnegd_s64                   │ 0    │ Neon       │ A64        │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vnegq_f64                   │ 0    │ Neon       │ A64        │      │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vnegq_s64                   │ 0    │ Neon       │ A64        │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vrax1q_u64                  │ 0    │ Neon       │ A64        │      │ Logical/Rotate and exclusive OR                                                │ no          │ Rotate and Exclusive OR rotates each 64-bit element of the 128-bit vector in a source SIMD&FP register left by 1, performs a bitwise exclusive OR of the resulting 128-bit vector and the vector in another source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                             
vqneg_s64                   │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegb_s8                   │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegd_s64                  │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegh_s16                  │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegq_s64                  │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegs_s32                  │ 0    │ Neon       │ A64        │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqmovn_high_s16             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_high_s32             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_high_s64             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_high_u16             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovn_high_u32             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovn_high_u64             │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovnd_s64                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovnd_u64                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovnh_s16                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovnh_u16                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovns_s32                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovns_u32                 │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovun_high_s16            │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovun_high_s32            │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovun_high_s64            │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovund_s64                │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovunh_s16                │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovuns_s32                │ 0    │ Neon       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vmovl_high_s16              │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_high_s32              │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_high_s8               │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_high_u16              │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_high_u32              │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_high_u8               │ 0    │ Neon       │ A64        │      │ Move/Widen                                                                     │ no          │ Vector move
vfma_n_f64                  │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, adds the product to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                                
vfmaq_n_f64                 │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfms_n_f32                  │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_n_f64                  │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, negates the product, adds that to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                             
vfmsq_n_f32                 │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_n_f64                 │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vmul_lane_f64               │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_laneq_f32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_laneq_f64              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_laneq_s16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_laneq_s32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_laneq_u16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_laneq_u32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_n_f64                  │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmuld_lane_f64              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmuld_laneq_f64             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_lane_f64              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_laneq_f64             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_n_f64                 │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmuls_lane_f32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmuls_laneq_f32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmull_high_lane_s16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_lane_s32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_lane_u16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_lane_u32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_laneq_s16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_laneq_s32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_laneq_u16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_laneq_u32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_n_s16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_n_s32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_n_u16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_n_u32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmla_laneq_f32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator
vmla_laneq_s16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_laneq_s32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_laneq_u16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_laneq_u32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlal_high_lane_s16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_lane_s32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_lane_u16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_lane_u32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_laneq_s16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_laneq_s32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_laneq_u16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_laneq_u32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlaq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator
vmlaq_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlal_high_n_s16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_n_s32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_n_u16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_n_u32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlsl_high_n_s16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_n_s32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_n_u16            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_n_u32            │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmls_laneq_f32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-subtract from accumulator
vmls_laneq_s16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_laneq_s32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_laneq_u16              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_laneq_u32              │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsl_high_lane_s16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_lane_s32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_lane_u16         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_lane_u32         │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_laneq_s16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_laneq_s32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_laneq_u16        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_laneq_u32        │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-subtract from accumulator
vmlsq_laneq_s16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_laneq_s32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_laneq_u16             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_laneq_u32             │ 0    │ Neon       │ A64        │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vrshld_s64                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshld_u64                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vqrshlb_s8                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlb_u8                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshld_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshld_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshlh_s16                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlh_u16                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshls_s32                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshls_u32                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqshlb_n_s8                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlb_n_u8                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlb_s8                   │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlb_u8                   │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshld_n_s64                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshld_n_u64                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshld_s64                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshld_u64                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlh_n_s16                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlh_n_u16                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlh_s16                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlh_u16                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshls_n_s32                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshls_n_u32                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshls_s32                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshls_u32                  │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlub_n_s8                │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshlud_n_s64               │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshluh_n_s16               │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshlus_n_s32               │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vshld_n_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshld_n_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshld_s64                   │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshld_u64                   │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vslid_n_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vslid_n_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vshll_high_n_s16            │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_high_n_s32            │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_high_n_s8             │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_high_n_u16            │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vshll_high_n_u32            │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vshll_high_n_u8             │ 0    │ Neon       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vrshrd_n_s64                │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshrd_n_u64                │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrsrad_n_s64                │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsrad_n_u64                │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrshrn_high_n_s16           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_high_n_s32           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_high_n_s64           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_high_n_u16           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_high_n_u32           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_high_n_u64           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vqrshrn_high_n_s16          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_high_n_s32          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_high_n_s64          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_high_n_u16          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrn_high_n_u32          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrn_high_n_u64          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrnd_n_s64              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrnd_n_u64              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrnh_n_s16              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrnh_n_u16              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrns_n_s32              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrns_n_u32              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrun_high_n_s16         │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrun_high_n_s32         │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrun_high_n_s64         │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrund_n_s64             │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrunh_n_s16             │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshruns_n_s32             │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqshrn_high_n_s16           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_high_n_s32           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_high_n_s64           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_high_n_u16           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrn_high_n_u32           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrn_high_n_u64           │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrnd_n_s64               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrnd_n_u64               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrnh_n_s16               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrnh_n_u16               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrns_n_s32               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrns_n_u32               │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrun_high_n_s16          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrun_high_n_s32          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrun_high_n_s64          │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrund_n_s64              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrunh_n_s16              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshruns_n_s32              │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vshrd_n_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshrd_n_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vsrad_n_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsrad_n_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsrid_n_s64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsrid_n_u64                 │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vshrn_high_n_s16            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_high_n_s32            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_high_n_s64            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_high_n_u16            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_high_n_u32            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_high_n_u64            │ 0    │ Neon       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vst1_f64                    │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f64_x2                 │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f64_x3                 │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f64_x4                 │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_f64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f64_x2                │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f64_x3                │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f64_x4                │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_f64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_f64                    │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_lane_f64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_s64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_u64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_f64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_f64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_s64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_s8               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_u64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_u8               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_s64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_u64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_f64                    │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst3_lane_f64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_s64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_u64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_f64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_f64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_s64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_u64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_s64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_u64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_f64                    │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst4_lane_f64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_s64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_u64               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_f64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_f64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_s64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_s8               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_u64              │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_u8               │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_s64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_u64                   │ 0    │ Neon       │ A64        │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vqtbx1_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx1_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx1q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx1q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbl1_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl1_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl1q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl1q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4_s8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4_u8                   │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4q_s8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4q_u8                  │ 0    │ Neon       │ A64        │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vabd_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabdd_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabdq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabds_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabs_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabs_s64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabsd_s64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabsq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabsq_s64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vqabs_s64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsb_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsd_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsh_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsq_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabss_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vabdl_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabdl_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabdl_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabal_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vabal_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vabal_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vaddv_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Floating-point add across vector
vaddv_s16                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddv_s32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across vector
vaddv_s8                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddv_u32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across vector
vaddvq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ yes         │ Floating-point add across vector
vaddvq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Floating-point add across vector
vaddvq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across vector
vaddvq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddvq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ Add across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
vaddlv_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                   
vaddlv_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vaddlv_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                   
vaddlv_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vaddlv_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vaddlvq_s16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                   
vaddlvq_s32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                   
vaddlvq_s8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Signed Add Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                   
vaddlvq_u16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vaddlvq_u32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vaddlvq_u8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector widening     │ no          │ Unsigned sum Long across Vector. This instruction adds every vector element in the source SIMD&FP register together, and writes the scalar result to the destination SIMD&FP register. The destination scalar is twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vmaxv_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vmaxv_s16                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                         
vmaxv_s32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vmaxv_s8                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                         
vmaxv_u16                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                     
vmaxv_u32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vmaxv_u8                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                     
vmaxvq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Floating-point Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                                 
vmaxvq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vmaxvq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                         
vmaxvq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                         
vmaxvq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Signed Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                         
vmaxvq_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                     
vmaxvq_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                     
vmaxvq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ Unsigned Maximum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                     
vmaxnmv_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector (IEEE754)     │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vmaxnmvq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector (IEEE754)     │ no          │ Floating-point Maximum Number across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the largest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                          
vmaxnmvq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector (IEEE754)     │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vminv_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vminv_s16                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                        
vminv_s32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vminv_s8                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                        
vminv_u16                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                    
vminv_u32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vminv_u8                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                    
vminvq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Floating-point Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                                
vminvq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vminvq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                        
vminvq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                        
vminvq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Signed Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                                        
vminvq_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                    
vminvq_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                    
vminvq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ Unsigned Minimum across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                                                                                    
vminnmv_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector (IEEE754)     │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vminnmvq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector (IEEE754)     │ no          │ Floating-point Minimum Number across Vector. This instruction compares all the vector elements in the source SIMD&FP register, and writes the smallest of the values as a scalar to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                         
vminnmvq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector (IEEE754)     │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vadd_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vaddd_s64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddd_u64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vaddhn_high_s16             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_high_s32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_high_s64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_high_u16             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_high_u32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_high_u64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vraddhn_high_s16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_high_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_high_s64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_high_u16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_high_u32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_high_u64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vqaddb_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddb_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddd_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddd_u64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddh_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddh_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqadds_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqadds_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vsqadd_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqadd_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqadd_u64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqadd_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddb_u8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddd_u64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddh_u16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddq_u16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddq_u32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddq_u64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqaddq_u8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vsqadds_u32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Accumulate of Signed value. This instruction adds the signed integer values of the vector elements in the source SIMD&FP register to corresponding unsigned integer values of the vector elements in the destination SIMD&FP register, and accumulates the resulting unsigned integer values with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                              
vuqadd_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqadd_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqadd_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqadd_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddb_s8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddd_s64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddh_s16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddq_s16                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddq_s32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddq_s64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqaddq_s8                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vuqadds_s32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Accumulate of Unsigned value. This instruction adds the unsigned integer values of the vector elements in the source SIMD&FP register to corresponding signed integer values of the vector elements in the destination SIMD&FP register, and writes the resulting signed integer values to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                              
vaddl_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddl_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddl_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddw_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vaddw_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vaddw_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vdiv_f32                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vdiv_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vdivq_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vdivq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vdot_laneq_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdot_laneq_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vdotq_laneq_s32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product signed arithmetic (vector). This instruction performs the dot product of the four signed 8-bit elements in each 32-bit element of the first source register with the four signed 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                                   
vdotq_laneq_u32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product unsigned arithmetic (vector). This instruction performs the dot product of the four unsigned 8-bit elements in each 32-bit element of the first source register with the four unsigned 8-bit elements of the corresponding 32-bit element in the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                                             
vsudot_laneq_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.                                                                                                                                                                                                                                            
vsudotq_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot product index form with signed and unsigned integers. This instruction performs the dot product of the four signed 8-bit integer values in each 32-bit element of the first source register with the four unsigned 8-bit integer values in an indexed 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination vector.                                                                                                                                                                                                                                            
vusdot_laneq_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vusdotq_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vusdotq_s32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Dot product                                                  │ no          │ Dot Product vector form with unsigned and signed integers. This instruction performs the dot product of the four unsigned 8-bit integer values in each 32-bit element of the first source register with the four signed 8-bit integer values in the corresponding 32-bit element of the second source register, accumulating the result into the corresponding 32-bit element of the destination register.                                                                                                                                                                                                                                  
vmax_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmaxq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmaxnm_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmaxnmq_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Maximum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the larger of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                           
vmin_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vminnm_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminnmq_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, writes the smaller of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vminq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vfma_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, adds the product to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                                
vfma_lane_f32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfma_lane_f64               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfma_laneq_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfma_laneq_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmad_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmad_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmas_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmas_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfms_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point Fused Multiply-Subtract (scalar). This instruction multiplies the values of the first two SIMD&FP source registers, negates the product, adds that to the value of the third SIMD&FP source register, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                             
vfms_lane_f32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_lane_f64               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_laneq_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_laneq_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsd_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsd_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmss_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmss_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vmul_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmull_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmulq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulx_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxd_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxd_lane_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxd_laneq_f64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_lane_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_lane_f64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_laneq_f32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_laneq_f64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxs_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxs_lane_f32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxs_laneq_f32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmla_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Floating-point multiply-add to accumulator
vmlaq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Floating-point multiply-add to accumulator
vmls_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-subtract from accumulator
vmlsq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-subtract from accumulator
vmlal_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlsl_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vqdmulhh_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhs_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmull_high_s16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmullh_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmulls_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqrdmulhh_s16               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhs_s32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqdmulh_laneq_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulh_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhh_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhq_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhq_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhs_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhs_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmull_high_lane_s16       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_lane_s32       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_laneq_s16      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_laneq_s32      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_n_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_high_n_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_laneq_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmullh_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmullh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmulls_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmulls_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqrdmulh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulh_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhh_lane_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhh_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhq_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhq_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhs_lane_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhs_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqdmlal_high_lane_s16       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_lane_s32       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_laneq_s16      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_laneq_s32      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_s16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_laneq_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlalh_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlalh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlalh_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlals_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlals_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlals_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlsl_high_lane_s16       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_lane_s32       │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_laneq_s16      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_laneq_s32      │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_s16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_laneq_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_laneq_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlslh_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlslh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlslh_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsls_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsls_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsls_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqrdmlah_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlah_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahh_s16               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlahq_s16               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahq_s32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahs_s32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlsh_s16                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlsh_s32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshh_s16               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_s16               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_s32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshs_s32               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlah_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlah_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlah_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlah_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahh_lane_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahh_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahq_lane_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahq_lane_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahq_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahq_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahs_lane_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlahs_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Accumulate returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and accumulates the most significant half of the final results with the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                 
vqrdmlsh_lane_s16           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlsh_lane_s32           │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlsh_laneq_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlsh_laneq_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshh_lane_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshh_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_lane_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_lane_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_laneq_s16         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshq_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshs_lane_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqrdmlshs_laneq_s32         │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by element           │ no          │ Signed Saturating Rounding Doubling Multiply Subtract returning High Half (vector). This instruction multiplies the vector elements of the first source SIMD&FP register with the corresponding vector elements of the second source SIMD&FP register without saturating the multiply results, doubles the results, and subtracts the most significant half of the final results from the vector elements of the destination SIMD&FP register. The results are rounded.                                                                                                                                                                     
vqdmlal_high_n_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_high_n_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlsl_high_n_s16          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_high_n_s32          │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vmull_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vpaddd_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpaddd_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddd_u64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpaddq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpaddq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_u64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpaddq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadds_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpmaxnmqd_f64               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxnms_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmaxq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmaxq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmaxq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmaxq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmaxq_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmaxq_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmaxq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmaxqd_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmaxs_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmaxnm_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum (IEEE754)               │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxnmq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum (IEEE754)               │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxnmq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum (IEEE754)               │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpminq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vpminq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vpminq_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpminq_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpminq_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpminq_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vpminq_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vpminq_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vpmins_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vpminnm_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminnmq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminnmq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminnmqd_f64               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminnms_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminqd_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vrecpe_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecped_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpeq_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpes_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecps_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpsd_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpsq_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpss_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpxd_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal exponent                               │ no          │ Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrecpxs_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal exponent                               │ no          │ Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrte_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrted_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrteq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrtes_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrts_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrsqrtsd_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrsqrtsq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrsqrtss_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrnd32x_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd32x_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd32xq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd32xq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd32z_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd32z_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd32zq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd32zq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 32-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 32-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd64x_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd64x_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd64xq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd64xq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                             
vrnd64z_f32                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd64z_f64                 │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd64zq_f32                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd64zq_f64                │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to 64-bit Integer toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values that fit into a 64-bit integer size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                          
vrnd_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrnda_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndaq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, to nearest with ties to Away (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round to Nearest with Ties to Away rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                 
vrndi_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndiq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndm_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndmq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Minus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                              
vrndp_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndpq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Plus infinity (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                
vrndq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, toward Zero (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                  
vrndx_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vrndxq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral exact, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                
vsqrt_f32                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vsqrt_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vsqrtq_f32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vsqrtq_f64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vrsubhn_high_s16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_high_s32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_high_s64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_high_u16            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_high_u32            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_high_u64            │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vsubhn_high_s16             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_high_s32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_high_s64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_high_u16             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_high_u32             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_high_u64             │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vqsubb_s8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubb_u8                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubd_s64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubd_u64                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubh_s16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubh_u16                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubs_s32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubs_u32                  │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vsub_f64                    │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsubd_s64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubd_u64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_f64                   │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsubl_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubl_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubl_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubw_high_s16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_high_s32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_high_s8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_high_u16              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vsubw_high_u32              │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vsubw_high_u8               │ 0    │ Neon       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vcombine_f64                │ 0    │ Neon       │ A64        │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcopy_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_lane_s16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_s32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_s64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_lane_s8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_u16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_u32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_u64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_lane_u8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_laneq_s16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_s32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_s64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_laneq_s8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_u16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_u32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_u64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vcopy_laneq_u8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_f32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_f64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_s16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_s32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_s64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_s8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_u16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_u32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_u64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_u8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_f32            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_f64            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_s16            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_s32            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_s64            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_s8             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_u16            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_u32            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_u64            │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_u8             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_f64                 │ 0    │ Neon       │ A64        │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdupb_lane_s8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupb_lane_u8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupb_laneq_s8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdupb_laneq_u8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_lane_s64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_lane_u64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_laneq_s64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupd_laneq_u64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_lane_s16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_lane_u16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_laneq_s16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_laneq_u16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_lane_f32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_lane_s32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_lane_u32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_laneq_s32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdups_laneq_u32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vget_lane_f64               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vgetq_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vext_f64                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_f64                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vrbit_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vrbit_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vrbitq_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vrbitq_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vdup_lane_f64               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_f32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_s16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_s32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_s64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_s8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdup_laneq_u16              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdup_laneq_u32              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_u64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdup_laneq_u8               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_n_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdupq_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_f32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_f64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdupq_laneq_s16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_s32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_s64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_s8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_u16             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_u32             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_u64             │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_u8              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_n_f64                 │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_f64                 │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_f64               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_f64              │ 0    │ Neon       │ A64        │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vget_high_f64               │ 0    │ Neon       │ A64        │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_f64                │ 0    │ Neon       │ A64        │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vtrn1_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn2_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vuzp1_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp2_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip1_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip2_f32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_s16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_s32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_s8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_u16                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_u32                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_u8                    │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_f32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_f64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_s16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_s32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_s64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_s8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_u16                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_u32                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_u64                  │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_u8                   │ 0    │ Neon       │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vcopy_lane_bf16             │ 0    │ Neon       │ A64        │ bf16 │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_bf16            │ 0    │ Neon       │ A64        │ bf16 │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_bf16            │ 0    │ Neon       │ A64        │ bf16 │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_bf16           │ 0    │ Neon       │ A64        │ bf16 │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcagth_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcageh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcalth_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcaleh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vceqzh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Bitwise equal to zero                                                  │ no          │ Floating-point Compare Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                   
vceqh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Compare/Equal to                                                               │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vcgth_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgeh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgezh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Greater than or equal to zero                                          │ no          │ Floating-point Compare Greater than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                   
vcgtzh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Greater than zero                                                      │ no          │ Floating-point Compare Greater than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is greater than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                           
vclth_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcleh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal
vclezh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Less than or equal to zero                                             │ no          │ Floating-point Compare Less than or Equal to zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than or equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                         
vcltzh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Compare/Less than zero                                                         │ no          │ Floating-point Compare Less than zero (vector). This instruction reads each floating-point value in the source SIMD&FP register and if the value is less than zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                 
vcvt_high_f16_f32           │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.                                                                                                                                                                             
vcvt_high_f32_f16           │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&FP destination register.                                                                                                                                                                                                                                                                     
vcvtah_s16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtah_s64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to a signed integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtah_u16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtah_u64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to Away (vector). This instruction converts each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest with Ties to Away rounding mode and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvth_f16_s16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_f16_s64               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_f16_u16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_f16_u64               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_n_f16_s16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_n_f16_s64             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvth_n_f16_u16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_n_f16_u64             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvth_n_s16_f16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_n_s64_f16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_n_u16_f16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvth_n_u64_f16             │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvth_s16_f16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_s64_f16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvth_u16_f16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvth_u64_f16               │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtmh_s16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmh_s64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtmh_u16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtmh_u64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Minus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Minus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                               
vcvtnh_s16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnh_s64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                         
vcvtnh_u16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtnh_u64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding to nearest with ties to even (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round to Nearest rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                    
vcvtph_s16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtph_s64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to a signed integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                      
vcvtph_u16_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vcvtph_u64_f16              │ 0    │ Neon       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned integer, rounding toward Plus infinity (vector). This instruction converts a scalar or each element in a vector from a floating-point value to an unsigned integer value using the Round towards Plus Infinity rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                 
vabdh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vdiv_f16                    │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vdivq_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Division                                                     │ no          │ Floating-point Divide (vector). This instruction divides the floating-point values in the elements in the first source SIMD&FP register, by the floating-point values in the corresponding elements in the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                       
vmaxh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmaxnmv_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vmaxnmvq_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vmaxv_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vmaxvq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vminh_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vminnmv_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vminnmvq_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vminv_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vminvq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vfma_lane_f16               │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfma_laneq_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfma_n_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmah_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmah_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_n_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfms_lane_f16               │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_laneq_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfms_n_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsh_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsh_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_n_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vmul_laneq_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulh_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulh_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulx_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulx_n_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxh_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxh_lane_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxh_laneq_f16            │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_lane_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_laneq_f16            │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmulxq_n_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Multiply/Multiply extended                                   │ no          │ Floating-point Multiply extended. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vpaddq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpmaxnm_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxnmq_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                            
vpmaxq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpminnm_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminnmq_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Number Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of floating-point values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                            
vpminq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vrecpeh_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpxh_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal exponent (scalar). This instruction finds an approximate reciprocal exponent for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrteh_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrtsh_f16                │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrecpsh_f16                 │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Reciprocal/Reciprocal step                                   │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrndi_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vrndiq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Rounding                                                     │ no          │ Floating-point Round to Integral, using current rounding mode (vector). This instruction rounds a vector of floating-point values in the SIMD&FP source register to integral floating-point values of the same size using the rounding mode that is determined by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                      
vsqrt_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vsqrtq_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector arithmetic/Square root                                                  │ no          │ Floating-point Square Root (vector). This instruction calculates the square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                          
vdup_laneq_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vduph_lane_f16              │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vduph_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_f16             │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vtrn1_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn2_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vuzp1_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp2_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip1_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip2_f16                   │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_f16                  │ 0    │ Neon       │ A64        │ fp16 │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vceqz_p8                    │ 0    │ Neon       │ A64        │ poly │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vceqzq_p8                   │ 0    │ Neon       │ A64        │ poly │ Compare/Bitwise equal to zero                                                  │ no          │ Compare bitwise Equal to zero (vector). This instruction reads each vector element in the source SIMD&FP register and if the value is equal to zero sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                                                                                                
vld2_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_p64                   │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_p64                   │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_p64               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_p64                   │ 0    │ Neon       │ A64        │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vst2_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_p64                   │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_p64                   │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_lane_p64               │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_p64              │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_p64                   │ 0    │ Neon       │ A64        │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vqtbx1_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx1q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx2q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx3q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbx4q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vqtbl1_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl1q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl2q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl3q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4_p8                   │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vqtbl4q_p8                  │ 0    │ Neon       │ A64        │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vmull_high_p8               │ 0    │ Neon       │ A64        │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                                               
vcopy_lane_p16              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_p16             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopy_laneq_p8              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_p16             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_lane_p8              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_p16            │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcopyq_laneq_p8             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Copy vector lane                                           │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdupb_lane_p8               │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vdupb_laneq_p8              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_lane_p16              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vduph_laneq_p16             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Set all vector lanes to the same value
vrbit_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vrbitq_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Reverse bits within elements                               │ no          │ Reverse Bit order (vector). This instruction reads each vector element from the source SIMD&FP register, reverses the bits of the element, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vdup_laneq_p16              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_p64              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_laneq_p8               │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_p16             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_p64             │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_laneq_p8              │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vtrn1_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn1q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                     
vtrn2_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vtrn2q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Transpose elements                                         │ no          │ Transpose vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places each result into consecutive elements of a vector, and writes the vector to the destination SIMD&FP register. Vector elements from the first source register are placed into even-numbered elements of the destination vector, starting at zero, while vector elements from the second source register are placed into odd-numbered elements of the destination vector.                                                                                                                      
vuzp1_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp1q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (primary). This instruction reads corresponding even-numbered vector elements from the two source SIMD&FP registers, starting at zero, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                           
vuzp2_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp2q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Unzip elements                                             │ no          │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip1_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip1q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (primary). This instruction reads adjacent vector elements from the lower half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                        
vzip2_p16                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2_p8                    │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_p16                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_p64                  │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip2q_p8                   │ 0    │ Neon       │ A64        │ poly │ Vector manipulation/Zip elements                                               │ no          │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vbic_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbic_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbicq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise clear                                                 │ no          │ Bitwise bit Clear (vector, register). This instruction performs a bitwise AND between the first source SIMD&FP register and the complement of the second source SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                
vbsl_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vcls_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vcls_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vcls_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vcls_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vcls_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vcls_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclsq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading sign bits                                       │ no          │ Count Leading Sign bits (vector). This instruction counts the number of consecutive bits following the most significant bit that are the same as the most significant bit in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The count does not include the most significant bit itself.                                                                                                                                                                                                                                                    
vclz_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclz_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclz_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclz_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclz_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclz_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vclzq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Count leading zeros                                           │ no          │ Count Leading Zero bits (vector). This instruction counts the number of consecutive zeros, starting from the most significant bit, in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                       
vcnt_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vcnt_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vcntq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vcntq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vcagt_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcagtq_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute greater than                                                  │ no          │ Floating-point Absolute Compare Greater than (vector). This instruction compares the absolute value of each vector element in the first source SIMD&FP register with the absolute value of the corresponding vector element in the second source SIMD&FP register and if the first value is greater than the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                          
vcage_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcageq_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute greater than or equal to                                      │ no          │ Floating-point Absolute Compare Greater than or Equal (vector). This instruction compares the absolute value of each floating-point value in the first source SIMD&FP register with the absolute value of the corresponding floating-point value in the second source SIMD&FP register and if the first value is greater than or equal to the second value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                         
vcalt_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcaltq_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute less than                                                     │ no          │ Floating-point absolute compare less than
vcale_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal
vcaleq_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Absolute less than or equal to                                         │ no          │ Floating-point absolute compare less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vceq_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceq_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceq_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Floating-point Compare Equal (vector). This instruction compares each floating-point value from the first source SIMD&FP register, with the corresponding floating-point value from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                             
vceqq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vtst_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtst_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vcgt_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgt_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgt_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Floating-point Compare Greater than (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                  
vcgtq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare signed Greater than (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcgtq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than                                                           │ no          │ Compare unsigned Higher (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                         
vcge_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcge_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcge_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcge_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcge_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcge_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcge_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcgeq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Floating-point Compare Greater than or Equal (vector). This instruction reads each floating-point value in the first source SIMD&FP register and if the value is greater than or equal to the corresponding floating-point value in the second source SIMD&FP register sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                             
vcgeq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcgeq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcgeq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare signed Greater than or Equal (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first signed integer value is greater than or equal to the second signed integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                    
vcgeq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcgeq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vcgeq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Greater than or equal to                                               │ no          │ Compare unsigned Higher or Same (vector). This instruction compares each vector element in the first source SIMD&FP register with the corresponding vector element in the second source SIMD&FP register and if the first unsigned integer value is greater than or equal to the second unsigned integer value sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                     
vclt_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vclt_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vclt_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vclt_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vclt_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vclt_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vclt_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcltq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Floating-point compare less than
vcltq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vcltq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vcltq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare signed less than
vcltq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcltq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcltq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than                                                              │ no          │ Compare unsigned less than
vcle_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vcle_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcle_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcle_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcle_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcle_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcle_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcleq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Floating-point compare less than or equal
vcleq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcleq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcleq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare signed less than or equal
vcleq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcleq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
vcleq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Compare/Less than or equal to                                                  │ no          │ Compare unsigned less than or equal
vcvt_f32_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_f32_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_n_f32_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvt_n_f32_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvt_n_s32_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_n_u32_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvt_s32_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvt_u32_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtq_f32_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_f32_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_f32_s32             │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Signed fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                              
vcvtq_n_f32_u32             │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Unsigned fixed-point Convert to Floating-point (vector). This instruction converts each element in a vector from fixed-point to floating-point using the rounding mode that is specified by the FPCR, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                                                            
vcvtq_n_s32_f32             │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_n_u32_f32             │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vcvtq_s32_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Signed fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point signed integer using the Round towards Zero rounding mode, and writes the result to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                        
vcvtq_u32_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to Unsigned fixed-point, rounding toward Zero (vector). This instruction converts a scalar or each element in a vector from floating-point to fixed-point unsigned integer using the Round towards Zero rounding mode, and writes the result to the general-purpose destination register.                                                                                                                                                                                                                                                                                                                            
vld1_dup_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_dup_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_dup_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s16_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s16_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s16_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s64_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s64_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s64_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s8_x2                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s8_x3                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_s8_x4                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u16_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u16_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u16_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u64_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u64_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u64_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u8_x2                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u8_x3                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_u8_x4                  │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s16_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s16_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s16_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s64_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s64_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s64_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s8_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s8_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_s8_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u16_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u16_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u16_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u64_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u64_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u64_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u8_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u8_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_u8_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_dup_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_dup_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld3_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld3_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld4_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld4_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vand_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vand_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vandq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/AND                                                                    │ no          │ Bitwise AND (vector). This instruction performs a bitwise AND between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vmvn_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvn_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvn_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvn_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvn_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvn_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
veor_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veor_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
veorq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Exclusive OR                                                           │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vneg_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vneg_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vneg_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vneg_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vnegq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Floating-point Negate (vector). This instruction negates the value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vnegq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vnegq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vnegq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Negate                                                                 │ no          │ Negate (vector). This instruction reads each vector element from the source SIMD&FP register, negates each value, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                 
vorr_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorr_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorrq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR                                                                     │ no          │ Bitwise inclusive OR (vector, register). This instruction performs a bitwise OR between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vorn_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vorn_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vornq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR NOT (vector). This instruction performs a bitwise OR NOT between the two source SIMD&FP registers, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vqneg_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqneg_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqneg_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vqnegq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Logical/Saturating Negate                                                      │ no          │ Signed saturating Negate. This instruction reads each vector element from the source SIMD&FP register, negates each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                        
vmovn_high_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_high_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_high_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_high_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_high_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_high_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vmovn_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Narrow                                                                    │ no          │ Extract Narrow. This instruction reads each vector element from the source SIMD&FP register, narrows each value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                                                                                                          
vqmovn_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates the value to half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                         
vqmovn_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovn_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Unsigned saturating extract Narrow. This instruction reads each vector element from the source SIMD&FP register, saturates each value to half the original width, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                                               
vqmovun_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovun_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vqmovun_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Saturating narrow                                                         │ no          │ Signed saturating extract Unsigned Narrow. This instruction reads each signed integer value in the vector of the source SIMD&FP register, saturates the value to an unsigned integer value that is half the original width, places the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements.                                                                                                                                                                                                          
vmovl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vmovl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Move/Widen                                                                     │ no          │ Vector move
vfma_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Fused multiply-accumulate by scalar                          │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vmul_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmul_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmul_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmul_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmul_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmulq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vmulq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
vmulq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmulq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmulq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar                                    │ no          │ Vector multiply by scalar
vmull_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply by scalar
vmull_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply by scalar
vmull_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply by scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
vmull_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply by scalar
vmull_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply with scalar
vmull_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply with scalar
vmull_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply with scalar
vmull_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply by scalar and widen                          │ no          │ Vector long multiply with scalar
vmla_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmla_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlal_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector widening multiply accumulate with scalar
vmlal_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector widening multiply accumulate with scalar
vmlal_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector widening multiply accumulate with scalar
vmlal_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector widening multiply accumulate with scalar
vmlaq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar
vmlaq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar                         │ no          │ Vector multiply accumulate with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vmlal_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply accumulate with scalar
vmlal_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply accumulate with scalar
vmlal_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply accumulate with scalar
vmlal_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply accumulate with scalar
vmls_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmls_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmls_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmls_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmls_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmlsl_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply subtract with scalar
vmlsl_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply subtract with scalar
vmlsl_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply subtract with scalar
vmlsl_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector widening multiply subtract with scalar
vmlsq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vmlsq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmlsq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmlsq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmlsq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-accumulate by scalar and widen               │ no          │ Vector multiply subtract with scalar
vmls_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vmls_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmls_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmls_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmls_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmlsl_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector widening multiply subtract with scalar
vmlsl_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector widening multiply subtract with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
vmlsl_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector widening multiply subtract with scalar
vmlsl_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector widening multiply subtract with scalar
vmlsq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmlsq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmlsq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmlsq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vmlsq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Scalar arithmetic/Vector multiply-subtract by scalar                           │ no          │ Vector multiply subtract with scalar
vrshl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshl_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshl_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshlq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshlq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshlq_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshlq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Signed Rounding Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vrshlq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshlq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshlq_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vrshlq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector rounding shift left                                          │ no          │ Unsigned Rounding Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                        
vqrshl_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshl_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshl_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshl_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshl_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshl_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshl_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshl_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshlq_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlq_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlq_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlq_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Signed saturating Rounding Shift Left (register). This instruction takes each vector element in the first source SIMD&FP register, shifts it by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqrshlq_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshlq_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshlq_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqrshlq_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating rounding shift left                               │ no          │ Unsigned saturating Rounding Shift Left (register). This instruction takes each vector element of the first source SIMD&FP register, shifts the vector element by a value from the least significant byte of the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                           
vqshl_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_n_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_n_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_n_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_n_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_n_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vqshlq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Unsigned saturating Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts the element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                             
vqshlu_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshlu_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshlu_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshlu_n_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshluq_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshluq_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshluq_n_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vqshluq_n_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector saturating shift left                                        │ no          │ Signed saturating Shift Left Unsigned (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, shifts each value by an immediate value, saturates the shifted result to an unsigned integer value, places the result in a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see UQRSHL.                                                                                                                                                                                                                                 
vshl_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshl_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshl_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshl_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshl_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshl_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshl_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshl_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshl_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshlq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Shift Left (immediate). This instruction reads each value from a vector, left shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                     
vshlq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshlq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshlq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshlq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Signed Shift Left (register). This instruction takes each signed integer value in the vector of the first source SIMD&FP register, shifts each value by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vshlq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshlq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshlq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vshlq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left                                                   │ no          │ Unsigned Shift Left (register). This instruction takes each element in the vector of the first source SIMD&FP register, shifts each element by a value from the least significant byte of the corresponding element of the second source SIMD&FP register, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                       
vsli_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vshll_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Signed Shift Left Long (immediate). This instruction reads each vector element from the source SIMD&FP register, left shifts each vector element by the specified shift amount, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                                                  
vshll_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vshll_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vshll_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Left/Vector shift left and widen                                         │ no          │ Unsigned Shift Left Long (immediate). This instruction reads each vector element in the lower or upper half of the source SIMD&FP register, shifts the unsigned integer value left by the specified number of bits, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                            
vrshr_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshr_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshr_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshr_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshr_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshr_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshr_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshr_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshrq_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshrq_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshrq_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshrq_n_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Signed Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSHR.                                                                                                                                                                                                                                               
vrshrq_n_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshrq_n_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshrq_n_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrshrq_n_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right                                        │ no          │ Unsigned Rounding Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USHR.                                                                                                                                                                                                                                             
vrsra_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsra_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsra_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsra_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsra_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsra_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsra_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsra_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsraq_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsraq_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsraq_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsraq_n_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Signed Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are rounded. For truncated results, see SSRA.                                                                                                                                                                                                                                  
vrsraq_n_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsraq_n_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsraq_n_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrsraq_n_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and accumulate                         │ no          │ Unsigned Rounding Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see USRA.                                                                                                                                                                                                                              
vrshrn_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_n_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_n_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vrshrn_n_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ Rounding Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the vector in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SHRN.                                                                                                                                                                            
vqrshrn_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_n_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. The results are rounded. For truncated results, see SQSHRN.                                         
vqrshrn_n_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrn_n_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrn_n_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Unsigned saturating Rounded Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are rounded. For truncated results, see UQSHRN.                                                                                                                                                                                               
vqrshrun_n_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrun_n_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqrshrun_n_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ Signed saturating Rounded Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are rounded. For truncated results, see SQSHRUN.                                                                                                                                                                          
vqshrn_n_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_n_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_n_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts and truncates each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are half as long as the source vector elements. For rounded results, see SQRSHRN.                                                             
vqshrn_n_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrn_n_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrn_n_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Unsigned saturating Shift Right Narrow (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, saturates each shifted result to a value that is half the original width, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see UQRSHRN.                                                                                                                            
vqshrun_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrun_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vqshrun_n_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ Signed saturating Shift Right Unsigned Narrow (immediate). This instruction reads each signed integer value in the vector of the source SIMD&FP register, right shifts each value by an immediate value, saturates the result to an unsigned integer value that is half the original width, places the final result into a vector, and writes the vector to the destination SIMD&FP register. The results are truncated. For rounded results, see SQRSHRUN.                                                                                                                                                                                 
vshr_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshr_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshr_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshr_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshr_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshr_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshr_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshr_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshrq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshrq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshrq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshrq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Signed Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, places the final result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSHR.                                                                                                                                                                                                                                                       
vshrq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshrq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshrq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vshrq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right                                                 │ no          │ Unsigned Shift Right (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, writes the final result to a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSHR.                                                                                                                                                                                                                                                     
vsra_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsra_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsra_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsra_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsra_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsra_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsra_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsra_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsraq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsraq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsraq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsraq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Signed Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are signed integer values. The results are truncated. For rounded results, see SRSRA.                                                                                                                                                                                                                                          
vsraq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsraq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsraq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsraq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and accumulate                                  │ no          │ Unsigned Shift Right and Accumulate (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each result by an immediate value, and accumulates the final results with the vector elements of the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The results are truncated. For rounded results, see URSRA.                                                                                                                                                                                                                                      
vsri_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vshrn_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vshrn_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ Shift Right Narrow (immediate). This instruction reads each unsigned integer value from the source SIMD&FP register, right shifts each result by an immediate value, puts the final result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The results are truncated. For rounded results, see RSHRN.                                                                                                                                                                                                  
vst1_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s16_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s16_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s16_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s64_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s64_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s64_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s8_x2                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s8_x3                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_s8_x4                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u16_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u16_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u16_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u32_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u32_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u32_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u64_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u64_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u64_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u8_x2                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u8_x3                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_u8_x4                  │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s16_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s16_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s16_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s64_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s64_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s64_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s8_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s8_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_s8_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u16_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u16_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u16_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u32_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u32_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u32_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u64_x2                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u64_x3                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u64_x4                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u8_x2                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u8_x3                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_u8_x4                 │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst3_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst3_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst4_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst4_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vtbx2_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbx2_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbx3_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ yes         │ Table vector lookup extension
vtbx3_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ yes         │ Table vector lookup extension                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
vtbx4_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbx4_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbl1_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl1_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl2_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl2_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl3_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl3_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl4_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl4_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbx1_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ yes         │ Table vector lookup extension
vtbx1_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Table lookup/Table lookup                                                      │ yes         │ Table vector lookup extension
vabd_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabd_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabd_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabd_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabd_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vabd_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vabd_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vabdq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Floating-point Absolute Difference (vector). This instruction subtracts the floating-point values in the elements of the second source SIMD&FP register, from the corresponding floating-point values in the elements of the first source SIMD&FP register, places the absolute value of each result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                
vabdq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabdq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabdq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Signed Absolute Difference. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                       
vabdq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vabdq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vabdq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference                                 │ no          │ Unsigned Absolute Difference (vector). This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, places the the absolute values of the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                            
vaba_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vaba_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vaba_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vaba_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vaba_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vaba_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vabaq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vabaq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vabaq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Signed Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                        
vabaq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vabaq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vabaq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ no          │ Unsigned Absolute difference and Accumulate. This instruction subtracts the elements of the vector of the second source SIMD&FP register from the corresponding elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the elements of the vector of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                      
vabs_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabs_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabs_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabs_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabsq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Floating-point Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, writes the result to a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                     
vabsq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabsq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vabsq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Absolute value                                      │ no          │ Absolute value (vector). This instruction calculates the absolute value of each vector element in the source SIMD&FP register, puts the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                    
vqabs_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabs_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabs_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vqabsq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ no          │ Signed saturating Absolute value. This instruction reads each vector element from the source SIMD&FP register, puts the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                                                                                                
vabdl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Signed Absolute Difference Long. This instruction subtracts the vector elements of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the results into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                           
vabdl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabdl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabdl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ Unsigned Absolute Difference Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, places the absolute value of the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                          
vabal_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Signed Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                              
vabal_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vabal_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vabal_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ no          │ Unsigned Absolute difference and Accumulate Long. This instruction subtracts the vector elements in the lower or upper half of the second source SIMD&FP register from the corresponding vector elements of the first source SIMD&FP register, and accumulates the absolute values of the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                            
vadd_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vadd_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vadd_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Floating-point Add (vector). This instruction adds corresponding vector elements in the two source SIMD&FP registers, writes the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                                                                                                                                                                                                                             
vaddq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Addition                                                 │ no          │ Add (vector). This instruction adds corresponding elements in the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                                
vaddhn_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vaddhn_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                    
vhadd_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhadd_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhadd_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhadd_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vhadd_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vhadd_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vhaddq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhaddq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhaddq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                         
vhaddq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vhaddq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vhaddq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                     
vraddhn_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vraddhn_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Rounding Add returning High Narrow. This instruction adds each vector element in the first source SIMD&FP register to the corresponding vector element in the second source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                           
vrhadd_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhadd_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhadd_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhadd_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrhadd_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrhadd_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrhaddq_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhaddq_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhaddq_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Signed Rounding Halving Add. This instruction adds corresponding signed integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                
vrhaddq_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrhaddq_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrhaddq_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ Unsigned Rounding Halving Add. This instruction adds corresponding unsigned integer values from the two source SIMD&FP registers, shifts each result right one bit, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vqadd_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqadd_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqadd_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqadd_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqadd_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqadd_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqadd_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqadd_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddq_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Signed saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                         
vqaddq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddq_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vqaddq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ Unsigned saturating Add. This instruction adds the values of corresponding elements of the two source SIMD&FP registers, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                       
vaddl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are signed integer values.                                                                                                                                                                                  
vaddl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Long (vector). This instruction adds each vector element in the lower or upper half of the first source SIMD&FP register to the corresponding vector element of the second source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements. All the values in this instruction are unsigned integer values.                                                                                                                                                                               
vaddw_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Signed Add Wide. This instruction adds vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the results in a vector, and writes the vector to the SIMD&FP destination register.                                                                                                                                                                                                                                                                                                                                               
vaddw_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vaddw_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vaddw_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ Unsigned Add Wide. This instruction adds the vector elements of the first source SIMD&FP register to the corresponding vector elements in the lower or upper half of the second source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. The vector elements of the destination register and the first source register are twice as long as the vector elements of the second source register. All the values in this instruction are unsigned integer values.                                                                                                                    
vmax_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmax_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmax_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmax_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmax_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmax_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmax_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmaxq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Floating-point Maximum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the larger of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vmaxq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmaxq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmaxq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Signed Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmaxq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmaxq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmaxq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Maximum                                                      │ no          │ Unsigned Maximum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the larger of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmin_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vmin_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmin_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmin_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vmin_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmin_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vmin_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vminq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Floating-point minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two floating-point values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                 
vminq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vminq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vminq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Signed Minimum (vector). This instruction compares corresponding elements in the vectors in the two source SIMD&FP registers, places the smaller of each of the two signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                         
vminq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vminq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vminq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Minimum                                                      │ no          │ Unsigned Minimum (vector). This instruction compares corresponding vector elements in the two source SIMD&FP registers, places the smaller of each of the two unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                             
vfma_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfmaq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Add to accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, adds the product to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vfms_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vfmsq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Fused multiply-accumulate                           │ no          │ Floating-point fused Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, negates the product, adds the result to the corresponding vector element of the destination SIMD&FP register, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                              
vmul_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmul_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmul_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Floating-point Multiply (vector). This instruction multiplies corresponding floating-point values in the vectors in the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vmulq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmulq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiplication                                      │ no          │ Multiply (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vmla_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Floating-point multiply-add to accumulator
vmla_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmla_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Floating-point multiply-add to accumulator
vmlaq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmlaq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Add to accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                      
vmls_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-subtract from accumulator
vmls_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmls_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-subtract from accumulator
vmlsq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlsq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate                                 │ no          │ Multiply-Subtract from accumulator (vector). This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                 
vmlal_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Add Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                          
vmlal_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlal_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Add Long (vector). This instruction multiplies the vector elements in the lower or upper half of the first source SIMD&FP register by the corresponding vector elements of the second source SIMD&FP register, and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                           
vmlsl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Signed Multiply-Subtract Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                       
vmlsl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vmlsl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Multiply-accumulate and widen                       │ no          │ Unsigned Multiply-Subtract Long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, and subtracts the results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                          
vqdmulh_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulh_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhq_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmulhq_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vqdmull_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqdmull_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Doubling Multiply Long. This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, doubles the results, places the final results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                   
vqrdmulh_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulh_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhq_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqrdmulhq_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ Signed saturating Rounding Doubling Multiply returning High half. This instruction multiplies the values of corresponding elements of the two source SIMD&FP registers, doubles the results, places the most significant half of the final results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                
vqdmulh_lane_s16            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high by scalar
vqdmulh_lane_s32            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high by scalar
vqdmulh_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high with scalar
vqdmulh_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high with scalar
vqdmulhq_lane_s16           │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high by scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
vqdmulhq_lane_s32           │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high by scalar
vqdmulhq_n_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high with scalar
vqdmulhq_n_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling multiply high with scalar                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vqdmull_lane_s16            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling long multiply by scalar
vqdmull_lane_s32            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling long multiply by scalar
vqdmull_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling long multiply with scalar
vqdmull_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating doubling long multiply with scalar
vqrdmulh_lane_s16           │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector rounding saturating doubling multiply high by scalar
vqrdmulh_lane_s32           │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector rounding saturating doubling multiply high by scalar
vqrdmulh_n_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating rounding doubling multiply high with scalar
vqrdmulh_n_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating rounding doubling multiply high with scalar
vqrdmulhq_lane_s16          │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector rounding saturating doubling multiply high by scalar
vqrdmulhq_lane_s32          │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector rounding saturating doubling multiply high by scalar
vqrdmulhq_n_s16             │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating rounding doubling multiply high with scalar
vqrdmulhq_n_s32             │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply by scalar and widen             │ no          │ Vector saturating rounding doubling multiply high with scalar
vqdmlal_lane_s16            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Vector widening saturating doubling multiply accumulate with scalar
vqdmlal_lane_s32            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Vector widening saturating doubling multiply accumulate with scalar
vqdmlal_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlal_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Add Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and accumulates the final results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                    
vqdmlsl_lane_s16            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Vector widening saturating doubling multiply subtract with scalar
vqdmlsl_lane_s32            │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Vector widening saturating doubling multiply subtract with scalar
vqdmlsl_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlsl_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate                      │ no          │ Signed saturating Doubling Multiply-Subtract Long. This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, doubles the results, and subtracts the final results from the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                 
vqdmlal_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Vector widening saturating doubling multiply accumulate with scalar
vqdmlal_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Vector widening saturating doubling multiply accumulate with scalar
vqdmlsl_n_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Vector widening saturating doubling multiply subtract with scalar
vqdmlsl_n_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Saturating multiply-accumulate by scalar and widen  │ no          │ Vector widening saturating doubling multiply subtract with scalar
vmull_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Signed Multiply Long (vector). This instruction multiplies corresponding signed integer values in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vmull_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vmull_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ Unsigned Multiply long (vector). This instruction multiplies corresponding vector elements in the lower or upper half of the two source SIMD&FP registers, places the result in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                 
vpadd_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Floating-point Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                   
vpadd_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadd_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadd_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ no          │ Add Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, adds each pair of values together, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                
vpadal_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadal_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadal_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadal_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpadal_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpadal_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpadalq_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadalq_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadalq_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register and accumulates the results into the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                            
vpadalq_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpadalq_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpadalq_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add and Accumulate Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register and accumulates the results with the vector elements of the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                        
vpaddl_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddl_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddl_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddl_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vpaddl_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vpaddlq_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddlq_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddlq_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Signed Add Long Pairwise. This instruction adds pairs of adjacent signed integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                        
vpaddlq_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vpaddlq_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ no          │ Unsigned Add Long Pairwise. This instruction adds pairs of adjacent unsigned integer values from the vector in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                                                                                                                                                                    
vpmax_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Floating-point Maximum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the larger of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                           
vpmax_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmax_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmax_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Signed Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                   
vpmax_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmax_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmax_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ no          │ Unsigned Maximum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the largest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                               
vpmin_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Floating-point Minimum Pairwise (vector). This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements from the concatenated vector, writes the smaller of each pair of values into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are floating-point values.                                                                                                                                                          
vpmin_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpmin_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpmin_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Signed Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of signed integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                  
vpmin_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vpmin_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vpmin_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ no          │ Unsigned Minimum Pairwise. This instruction creates a vector by concatenating the vector elements of the first source SIMD&FP register after the vector elements of the second source SIMD&FP register, reads each pair of adjacent vector elements in the two source SIMD&FP registers, writes the smallest of each pair of unsigned integer values into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                              
vrecpe_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpe_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Unsigned Reciprocal Estimate. This instruction reads each vector element from the source SIMD&FP register, calculates an approximate inverse for the unsigned integer value, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vrecpeq_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Estimate. This instruction finds an approximate reciprocal estimate for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                             
vrecpeq_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Unsigned Reciprocal Estimate. This instruction reads each vector element from the source SIMD&FP register, calculates an approximate inverse for the unsigned integer value, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                    
vrecps_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrecpsq_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ Floating-point Reciprocal Step. This instruction multiplies the corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 2.0, places the resulting floating-point values in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                         
vrsqrte_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrte_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Unsigned Reciprocal Square Root Estimate. This instruction reads each vector element from the source SIMD&FP register, calculates an approximate inverse square root for each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                            
vrsqrteq_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Estimate. This instruction calculates an approximate square root for each vector element in the source SIMD&FP register, places the result in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                    
vrsqrteq_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Unsigned Reciprocal Square Root Estimate. This instruction reads each vector element from the source SIMD&FP register, calculates an approximate inverse square root for each value, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values.                                                                                                                                                                                                                                                                                            
vrsqrts_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vrsqrtsq_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ Floating-point Reciprocal Square Root Step. This instruction multiplies corresponding floating-point values in the vectors of the two source SIMD&FP registers, subtracts each of the products from 3.0, divides these results by 2.0, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                         
vhsub_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsub_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsub_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsub_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vhsub_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vhsub_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vhsubq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsubq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsubq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Signed Halving Subtract. This instruction subtracts the elements in the vector in the second source SIMD&FP register from the corresponding elements in the vector in the first source SIMD&FP register, shifts each result right one bit, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                         
vhsubq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vhsubq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vhsubq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Unsigned Halving Subtract. This instruction subtracts the vector elements in the second source SIMD&FP register from the corresponding vector elements in the first source SIMD&FP register, shifts each result right one bit, places each result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vrsubhn_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vrsubhn_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Rounding Subtract returning High Narrow. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register.                                                                                                                                                                                                                                                                               
vsubhn_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vsubhn_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ Subtract returning High Narrow. This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the most significant half of the result into a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                          
vqsub_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsub_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsub_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsub_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsub_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsub_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsub_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsub_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubq_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubq_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubq_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubq_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Signed saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                    
vqsubq_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubq_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubq_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vqsubq_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ Unsigned saturating Subtract. This instruction subtracts the element values of the second source SIMD&FP register from the corresponding element values of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                  
vsub_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsub_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsub_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Floating-point Subtract (vector). This instruction subtracts the elements in the vector in the second source SIMD&FP register, from the corresponding elements in the vector in the first source SIMD&FP register, places each result into elements of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                 
vsubq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Subtraction                                         │ no          │ Subtract (vector). This instruction subtracts each vector element in the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                             
vsubl_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are signed integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                               
vsubl_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubl_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubl_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Long. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element of the first source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register. All the values in this instruction are unsigned integer values. The destination vector elements are twice as long as the source vector elements.                                                                                                                                                                            
vsubw_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Signed Subtract Wide. This instruction subtracts each vector element in the lower or upper half of the second source SIMD&FP register from the corresponding vector element in the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                   
vsubw_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vsubw_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vsubw_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ Unsigned Subtract Wide. This instruction subtracts each vector element of the second source SIMD&FP register from the corresponding vector element in the lower or upper half of the first source SIMD&FP register, places the result in a vector, and writes the vector to the SIMD&FP destination register. All the values in this instruction are signed integer values.                                                                                                                                                                                                                                                                 
vcombine_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vcombine_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcreate_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vget_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vget_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vget_lane_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vget_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vget_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vget_lane_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vget_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vgetq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vgetq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vgetq_lane_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Signed Move vector element to general-purpose register. This instruction reads the signed integer from the source SIMD&FP register, sign-extends it to form a 32-bit or 64-bit value, and writes the result to destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                        
vgetq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vext_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_s64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_u64                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_s64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_u64                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vrev16_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev16_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev16q_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev16q_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev32_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev64_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vdup_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdup_lane_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdup_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vdup_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
vdupq_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_f32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_s16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_s32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_s64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_s8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_u16                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_u32                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_u64                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_u8                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_f32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_s16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_s32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_s64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_s8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_u16                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_u32                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_u64                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_u8                  │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_f32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
vsetq_lane_s16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_s32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_s64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_s8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_u16              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_u32              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_u64              │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_u8               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
vget_high_f32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_s16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_s32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_s64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_s8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_u16               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_u32               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_u64               │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_u8                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_f32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_s16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_s32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_s64                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_s8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_u16                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_u32                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_u64                │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_u8                 │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vtrn_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vuzp_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip_f32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_s16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_s32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_s8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_u16                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_u32                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_u8                     │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_f32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_s16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_s32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_s8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_u16                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_u32                   │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_u8                    │ 0    │ Neon       │ v7/A32/A64 │      │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vld1_bf16_x3                │ 0    │ Neon       │ v7/A32/A64 │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_bf16_x3               │ 0    │ Neon       │ v7/A32/A64 │ bf16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vbsl_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vcvt_f16_f32                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to lower precision Narrow (vector). This instruction reads each vector element in the SIMD&FP source register, converts each result to half the precision of the source element, writes the final result to a vector, and writes the vector to the lower or upper half of the destination SIMD&FP register. The destination vector elements are half as long as the source vector elements. The rounding mode is determined by the FPCR.                                                                                                                                                                             
vcvt_f32_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Data type conversion/Conversions                                               │ no          │ Floating-point Convert to higher precision Long (vector). This instruction reads each element in a vector in the SIMD&FP source register, converts each value to double the precision of the source element using the rounding mode that is determined by the FPCR, and writes each result to the equivalent element of the vector in the SIMD&FP destination register.                                                                                                                                                                                                                                                                     
vld1_dup_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f16_x2                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f16_x3                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_f16_x4                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f16_x2                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f16_x3                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_f16_x4                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_dup_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_dup_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vmov_n_f16                  │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Move/Vector move                                                               │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_f16                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Move/Vector move                                                               │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vst1_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f16_x2                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f16_x3                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_f16_x4                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f16_x2                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f16_x3                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_f16_x4                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vcombine_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcreate_f16                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vget_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vgetq_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Extract one element from vector                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vext_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vrev64_f16                  │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_f16                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vdup_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_n_f16                  │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_n_f16                 │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_f16              │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vget_high_f16               │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_f16                │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vtrn_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vuzp_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip_f16                    │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_f16                   │ 0    │ Neon       │ v7/A32/A64 │ fp16 │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vbsl_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbsl_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vbslq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Bitwise select                                                │ no          │ Bitwise Select. This instruction sets each bit in the destination SIMD&FP register to the corresponding bit from the first source SIMD&FP register when the original destination bit was 1, otherwise from the second source SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                              
vcnt_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vcntq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Bit manipulation/Population count                                              │ no          │ Population Count per byte. This instruction counts the number of bits that have a value of one in each vector element in the source SIMD&FP register, places the result into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                           
vceq_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vceqq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Compare/Bitwise equal                                                          │ no          │ Compare bitwise Equal (vector). This instruction compares each vector element from the first source SIMD&FP register with the corresponding vector element from the second source SIMD&FP register, and if the comparison is equal sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                                                 
vtst_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vtstq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Compare/Bitwise not equal to zero                                              │ no          │ Compare bitwise Test bits nonzero (vector). This instruction reads each vector element in the first source SIMD&FP register, performs an AND with the corresponding vector element in the second source SIMD&FP register, and if the result is not zero, sets every bit of the corresponding vector element in the destination SIMD&FP register to one, otherwise sets every bit of the corresponding vector element in the destination SIMD&FP register to zero.                                                                                                                                                                           
vld1_dup_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_dup_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p16_x2                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p16_x3                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p16_x4                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p8_x2                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p8_x3                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1_p8_x4                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_dup_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_dup_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load one single-element structure and Replicate to all lanes (of one register). This instruction loads a single-element structure from memory and replicates the structure to all the lanes of the SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                        
vld1q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p16_x2                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p16_x3                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p16_x4                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p8_x2                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p8_x3                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld1q_p8_x4                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple single-element structures to one, two, three, or four registers. This instruction loads multiple single-element structures from memory and writes the result to one, two, three, or four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                   
vld2_dup_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_dup_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_dup_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_dup_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 2-element structure and Replicate to all lanes of two registers. This instruction loads a 2-element structure from memory and replicates the structure to all the lanes of the two SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                           
vld2q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld2q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 2-element structures to two registers. This instruction loads multiple 2-element structures from memory and writes the result to the two SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                             
vld3_dup_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_dup_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_dup_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_dup_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 3-element structure and Replicate to all lanes of three registers. This instruction loads a 3-element structure from memory and replicates the structure to all the lanes of the three SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                       
vld3q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld3q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 3-element structures to three registers. This instruction loads multiple 3-element structures from memory and writes the result to the three SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_dup_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_dup_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_dup_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load single 4-element structure and Replicate to all lanes of four registers. This instruction loads a 4-element structure from memory and replicates the structure to all the lanes of the four SIMD&FP registers.                                                                                                                                                                                                                                                                                                                                                                                                                         
vld4q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vld4q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Load/Stride                                                                    │ no          │ Load multiple 4-element structures to four registers. This instruction loads multiple 4-element structures from memory and writes the result to the four SIMD&FP registers, with de-interleaving.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vmvn_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vmvnq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Logical/Bitwise NOT                                                            │ no          │ Bitwise NOT (vector). This instruction reads each vector element from the source SIMD&FP register, places the inverse of each value into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                               
vsli_n_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsli_n_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsliq_n_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Left/Vector shift left and insert                                        │ no          │ Shift Left and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, left shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the left of each vector element in the source register are lost.                                                                                                                                                                               
vsri_n_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsri_n_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vsriq_n_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Shift/Right/Vector shift right and insert                                      │ no          │ Shift Right and Insert (immediate). This instruction reads each vector element in the source SIMD&FP register, right shifts each vector element by an immediate value, and inserts the result into the corresponding vector element in the destination SIMD&FP register such that the new zero bits created by the shift are not inserted but retain their existing value. Bits shifted out of the right of each vector element of the source register are lost.                                                                                                                                                                            
vst1_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p16_x2                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p16_x3                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p16_x4                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p8_x2                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p8_x3                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1_p8_x4                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p16_x2                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p16_x3                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p16_x4                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p64_x3                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p8_x2                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p8_x3                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst1q_p8_x4                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&FP registers, without interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                               
vst2_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst2q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 2-element structures from two registers. This instruction stores multiple 2-element structures from two SIMD&FP registers to memory, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                            
vst3_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst3q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 3-element structures from three registers. This instruction stores multiple 3-element structures to memory from three SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                        
vst4_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vst4q_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Store/Stride                                                                   │ no          │ Store multiple 4-element structures from four registers. This instruction stores multiple 4-element structures to memory from four SIMD&FP registers, with interleaving. Every element of each register is stored.                                                                                                                                                                                                                                                                                                                                                                                                                          
vtbx2_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbx3_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Extended table lookup                                             │ yes         │ Table vector lookup extension                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
vtbx4_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Extended table lookup                                             │ no          │ Table vector lookup extension. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the existing value in the vector element of the destination register is left unchanged. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.
vtbl1_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl2_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl3_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbl4_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Table lookup                                                      │ no          │ Table vector Lookup. This instruction reads each value from the vector elements in the index source SIMD&FP register, uses each result as an index to perform a lookup in a table of bytes that is described by one to four source table SIMD&FP registers, places the lookup result in a vector, and writes the vector to the destination SIMD&FP register. If an index is out of range for the table, the result for that lookup is 0. If more than one source register is used to describe the table, the first source register describes the lowest bytes of the table.                                                                 
vtbx1_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Table lookup/Table lookup                                                      │ yes         │ Table vector lookup extension
vadd_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vadd_p64                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vadd_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vaddq_p128                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vaddq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vaddq_p64                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vaddq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial addition                               │ no          │ Bitwise Exclusive OR (vector). This instruction performs a bitwise Exclusive OR operation between the two source SIMD&FP registers, and places the result in the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                              
vmul_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply. This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                      
vmull_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply Long. This instruction multiplies corresponding elements in the lower or upper half of the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register. The destination vector elements are twice as long as the elements that are multiplied.                                                                                                                                                                                                                                                                                               
vmulq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ Polynomial Multiply. This instruction multiplies corresponding elements in the vectors of the two source SIMD&FP registers, places the results in a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                      
vcombine_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector
vcombine_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Combine vectors                                            │ yes         │ Join two smaller vectors into a single larger vector                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
vcreate_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vcreate_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Create vector                                              │ no          │ Insert vector element from another vector element. This instruction copies the vector element of the source SIMD&FP register to the specified vector element of the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                                                                                           
vget_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vget_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vgetq_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract one element from vector                            │ no          │ Unsigned Move vector element to general-purpose register. This instruction reads the unsigned integer from the source SIMD&FP register, zero-extends it to form a 32-bit or 64-bit value, and writes the result to the destination general-purpose register.                                                                                                                                                                                                                                                                                                                                                                                
vext_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vext_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vextq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Extract vector from a pair of vectors                      │ no          │ Extract vector from pair of vectors. This instruction extracts the lowest vector elements from the second source SIMD&FP register and the highest vector elements from the first source SIMD&FP register, concatenates the results into a vector, and writes the vector to the destination SIMD&FP register vector. The index value specifies the lowest vector element to extract from the first source register, and consecutive elements are extracted from the first, then second, source registers until the destination vector is filled.                                                                                             
vrev16_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev16q_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 16-bit halfwords (vector). This instruction reverses the order of 8-bit elements in each halfword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vrev32_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev32q_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 32-bit words (vector). This instruction reverses the order of 8-bit or 16-bit elements in each word of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                          
vrev64_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vrev64q_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Reverse elements                                           │ no          │ Reverse elements in 64-bit doublewords (vector). This instruction reverses the order of 8-bit, 16-bit, or 32-bit elements in each doubleword of the vector in the source SIMD&FP register, places the results into a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                     
vdup_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdup_n_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdup_n_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Set all vector lanes to the same value
vdupq_n_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vdupq_n_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_p16                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmov_n_p8                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_p16                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vmovq_n_p8                  │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set all lanes to the same value                            │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vset_lane_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vset_lane_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_p16              │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vsetq_lane_p8               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Set vector lane                                            │ no          │ Move vector element to another vector element
vget_high_p16               │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_high_p8                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_p16                │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vget_low_p8                 │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Split vectors                                              │ no          │ Duplicate vector element to vector or scalar. This instruction duplicates the vector element at the specified element index in the source SIMD&FP register into a scalar or each element in a vector, and writes the result to the destination SIMD&FP register.                                                                                                                                                                                                                                                                                                                                                                            
vtrn_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrn_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vtrnq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Transpose elements                                         │ yes         │ Transpose elements
vuzp_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzp_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vuzpq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Unzip elements                                             │ yes         │ Unzip vectors (secondary). This instruction reads corresponding odd-numbered vector elements from the two source SIMD&FP registers, places the result from the first source register into consecutive elements in the lower half of a vector, and the result from the second source register into consecutive elements in the upper half of a vector, and writes the vector to the destination SIMD&FP register.                                                                                                                                                                                                                            
vzip_p16                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzip_p8                     │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_p16                   │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
vzipq_p8                    │ 0    │ Neon       │ v7/A32/A64 │ poly │ Vector manipulation/Zip elements                                               │ yes         │ Zip vectors (secondary). This instruction reads adjacent vector elements from the upper half of two source SIMD&FP registers as pairs, interleaves the pairs and places them into a vector, and writes the vector to the destination SIMD&FP register. The first pair from the first source register is placed into the two lowest vector elements, with subsequent pairs taken alternately from each source register.                                                                                                                                                                                                                      
svaddv                      │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ no          │ <conflicted
svmad_m                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmad_x                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmad_z                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ yes         │ <conflicted
svmla_m                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmla_x                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmla_z                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ yes         │ <conflicted
svmls_m                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmls_x                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmls_z                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ yes         │ <conflicted
svmsb_m                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmsb_x                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ maybe       │ <conflicted
svmsb_z                     │ 0    │ sve        │ A64        │      │ <multiple>                                                                     │ yes         │ <conflicted
svcls_m                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading sign bits                                       │ maybe       │ <conflicted
svcls_x                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading sign bits                                       │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcls_z                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading sign bits                                       │ yes         │ <conflicted
svclz_m                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading zeros                                           │ maybe       │ <conflicted
svclz_x                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading zeros                                           │ maybe       │ <conflicted
svclz_z                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Count leading zeros                                           │ yes         │ <conflicted
svextb_m                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svextb_x                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svextb_z                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ yes         │ <conflicted
svexth_m                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svexth_x                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svexth_z                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svextw_m                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svextw_x                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ maybe       │ <conflicted
svextw_z                    │ 0    │ sve        │ A64        │      │ Bit manipulation/Extend from low bits                                          │ yes         │ <conflicted
svcnt_m                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Population count                                              │ maybe       │ <conflicted
svcnt_x                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Population count                                              │ maybe       │ <conflicted
svcnt_z                     │ 0    │ sve        │ A64        │      │ Bit manipulation/Population count                                              │ yes         │ <conflicted
svacgt                      │ 0    │ sve        │ A64        │      │ Compare/Absolute greater than                                                  │ no          │ <conflicted
svacge                      │ 0    │ sve        │ A64        │      │ Compare/Absolute greater than or equal to                                      │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svaclt                      │ 0    │ sve        │ A64        │      │ Compare/Absolute less than                                                     │ no          │ <conflicted
svacle                      │ 0    │ sve        │ A64        │      │ Compare/Absolute less than or equal to                                         │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcmpeq                     │ 0    │ sve        │ A64        │      │ Compare/Equal to                                                               │ no          │ <conflicted
svcmpeq_wide                │ 0    │ sve        │ A64        │      │ Compare/Equal to                                                               │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcmpgt                     │ 0    │ sve        │ A64        │      │ Compare/Greater than                                                           │ no          │ <conflicted
svcmpgt_wide                │ 0    │ sve        │ A64        │      │ Compare/Greater than                                                           │ no          │ <conflicted
svcmpge                     │ 0    │ sve        │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcmpge_wide                │ 0    │ sve        │ A64        │      │ Compare/Greater than or equal to                                               │ no          │ <conflicted
svcmplt                     │ 0    │ sve        │ A64        │      │ Compare/Less than                                                              │ no          │ <conflicted
svcmplt_wide                │ 0    │ sve        │ A64        │      │ Compare/Less than                                                              │ no          │ <conflicted
svcmple                     │ 0    │ sve        │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ <conflicted
svcmple_wide                │ 0    │ sve        │ A64        │      │ Compare/Less than or equal to                                                  │ no          │ <conflicted
svcmpne                     │ 0    │ sve        │ A64        │      │ Compare/Not equal to                                                           │ no          │ <conflicted
svcmpne_wide                │ 0    │ sve        │ A64        │      │ Compare/Not equal to                                                           │ no          │ <conflicted
svcmpuo                     │ 0    │ sve        │ A64        │      │ Compare/Unordered with                                                         │ no          │ <conflicted
svcadd_m                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex addition                                            │ maybe       │ <conflicted
svcadd_x                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex addition                                            │ maybe       │ <conflicted
svcadd_z                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex addition                                            │ yes         │ <conflicted
svcmla_m                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ maybe       │ <conflicted
svcmla_x                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ maybe       │ <conflicted
svcmla_z                    │ 0    │ sve        │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ yes         │ <conflicted
svcvt_f32_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f32_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f32_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_f64_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f64_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f64_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_s32_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_s32_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_s32_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_s64_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_s64_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_s64_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_u32_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_u32_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_u32_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_u64_m                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_u64_x                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_u64_z                 │ 0    │ sve        │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svrdffr                     │ 0    │ sve        │ A64        │      │ Fault suppression/FFR manipulation                                             │ no          │ Read FFR, returning predicate of succesfully loaded elements
svrdffr_z                   │ 0    │ sve        │ A64        │      │ Fault suppression/FFR manipulation                                             │ no          │ Read FFR, returning predicate of succesfully loaded elements
svsetffr                    │ 0    │ sve        │ A64        │      │ Fault suppression/FFR manipulation                                             │ no          │ Initialize the first-fault register to all-true
svwrffr                     │ 0    │ sve        │ A64        │      │ Fault suppression/FFR manipulation                                             │ no          │ Write to the first-fault register
svldff1                     │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ <conflicted
svldff1_vnum                │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ <conflicted
svldff1sb_s16               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svldff1sb_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_u16               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_s16          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_u16          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sh_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sw_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and sign-extend, first-faulting
svldff1sw_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and sign-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svldff1sw_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and sign-extend, first-faulting
svldff1sw_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and sign-extend, first-faulting
svldff1ub_s16               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_u16               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_vnum_s16          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_vnum_u16          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svldff1ub_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1uh_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svldff1uh_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uw_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and zero-extend, first-faulting
svldff1uw_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and zero-extend, first-faulting
svldff1uw_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and zero-extend, first-faulting
svldff1uw_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Consecutive                             │ no          │ Load 32-bit data and zero-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svldff1_gather_f32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_f64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1_gather_index_f32    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index_f64    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index_s32    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index_s64    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index_u32    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_index_u64    │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svldff1_gather_offset       │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1_gather_offset_f32   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_offset_f64   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_offset_s32   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_offset_u32   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svldff1_gather_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svldff1_gather_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1_gather_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Unextended load, first-faulting
svldff1sb_gather_offset_s32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sb_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sb_gather_offset_u32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sb_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sb_gather_s32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_gather_u32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sb_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and sign-extend, first-faulting
svldff1sh_gather_index_s32  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_index_s64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_index_u32  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_index_u64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_offset_s32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_offset_u32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sh_gather_s32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_gather_u32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and sign-extend, first-faulting
svldff1sh_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and sign-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svldff1sw_gather_index_s64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sw_gather_index_u64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sw_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sw_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1sw_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 32-bit data and sign-extend, first-faulting
svldff1sw_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 32-bit data and sign-extend, first-faulting
svldff1ub_gather_offset_s32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1ub_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1ub_gather_offset_u32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1ub_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1ub_gather_s32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_gather_u32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1ub_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 8-bit data and zero-extend, first-faulting
svldff1uh_gather_index_s32  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svldff1uh_gather_index_s64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_index_u32  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_index_u64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_offset_s32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_offset_u32 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uh_gather_s32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and zero-extend, first-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svldff1uh_gather_u32        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uh_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 16-bit data and zero-extend, first-faulting
svldff1uw_gather_index_s64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uw_gather_index_u64  │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uw_gather_offset_s64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uw_gather_offset_u64 │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ <conflicted
svldff1uw_gather_s64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 32-bit data and zero-extend, first-faulting
svldff1uw_gather_u64        │ 0    │ sve        │ A64        │      │ Fault suppression/First-faulting loads/Gather                                  │ no          │ Load 32-bit data and zero-extend, first-faulting
svldnf1                     │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ <conflicted
svldnf1_vnum                │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ <conflicted
svldnf1sb_s16               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnf1sb_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_u16               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_s16          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_u16          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sb_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and sign-extend, non-faulting
svldnf1sh_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svldnf1sh_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sh_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and sign-extend, non-faulting
svldnf1sw_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and sign-extend, non-faulting
svldnf1sw_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and sign-extend, non-faulting
svldnf1sw_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and sign-extend, non-faulting
svldnf1sw_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and sign-extend, non-faulting
svldnf1ub_s16               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnf1ub_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_u16               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_vnum_s16          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_vnum_u16          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnf1ub_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1ub_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 8-bit data and zero-extend, non-faulting
svldnf1uh_s32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_u32               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_vnum_s32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_vnum_u32          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uh_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 16-bit data and zero-extend, non-faulting
svldnf1uw_s64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and zero-extend, non-faulting
svldnf1uw_u64               │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and zero-extend, non-faulting
svldnf1uw_vnum_s64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and zero-extend, non-faulting
svldnf1uw_vnum_u64          │ 0    │ sve        │ A64        │      │ Fault suppression/Non-faulting loads/Consecutive                               │ no          │ Load 32-bit data and zero-extend, non-faulting
svld1                       │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld1_vnum                  │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld1sb_s16                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_s32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_u16                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_u32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1sb_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_vnum_s16            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_vnum_s32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1sb_vnum_u16            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_vnum_u32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sb_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and sign-extend
svld1sh_s32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_u32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_vnum_s32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_vnum_u32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend
svld1sh_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and sign-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld1sw_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and sign-extend
svld1sw_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and sign-extend
svld1sw_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and sign-extend
svld1sw_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and sign-extend
svld1ub_s16                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_s32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1ub_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_u16                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_u32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_vnum_s16            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1ub_vnum_s32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_vnum_u16            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_vnum_u32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1ub_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 8-bit data and zero-extend
svld1uh_s32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld1uh_u32                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_vnum_s32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_vnum_u32            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uh_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 16-bit data and zero-extend
svld1uw_s64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and zero-extend
svld1uw_u64                 │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and zero-extend
svld1uw_vnum_s64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and zero-extend
svld1uw_vnum_u64            │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ Load 32-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld2                       │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld2_vnum                  │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld3                       │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld3_vnum                  │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld4                       │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld4_vnum                  │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svldnt1                     │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svldnt1_vnum                │ 0    │ sve        │ A64        │      │ Load/Consecutive                                                               │ no          │ <conflicted
svld1_gather_f32            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1_gather_f64            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_index          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1_gather_index_f32      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1_gather_index_f64      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_index_s32      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1_gather_index_s64      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_index_u32      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_index_u64      │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset         │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1_gather_offset_f32     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset_f64     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset_s32     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset_s64     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset_u32     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_offset_u64     │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_s32            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_s64            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_u32            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1_gather_u64            │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load
svld1sb_gather_offset_s32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sb_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sb_gather_offset_u32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sb_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sb_gather_s32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend
svld1sb_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend
svld1sb_gather_u32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend
svld1sb_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend
svld1sh_gather_index_s32    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_index_s64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_index_u32    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_index_u64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_offset_s32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1sh_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_offset_u32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sh_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1sh_gather_s32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend
svld1sh_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend
svld1sh_gather_u32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend
svld1sh_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld1sw_gather_index_s64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sw_gather_index_u64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sw_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sw_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1sw_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and sign-extend
svld1sw_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and sign-extend
svld1ub_gather_offset_s32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1ub_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1ub_gather_offset_u32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1ub_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1ub_gather_s32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend
svld1ub_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend
svld1ub_gather_u32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend
svld1ub_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svld1uh_gather_index_s32    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1uh_gather_index_s64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1uh_gather_index_u32    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uh_gather_index_u64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uh_gather_offset_s32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uh_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uh_gather_offset_u32   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1uh_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1uh_gather_s32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend
svld1uh_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld1uh_gather_u32          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend
svld1uh_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
svld1uw_gather_index_s64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svld1uw_gather_index_u64    │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uw_gather_offset_s64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uw_gather_offset_u64   │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svld1uw_gather_s64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and zero-extend
svld1uw_gather_u64          │ 0    │ sve        │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and zero-extend
svld1ro                     │ 0    │ sve        │ A64        │      │ Load/Load and replicate                                                        │ no          │ <conflicted
svld1rq                     │ 0    │ sve        │ A64        │      │ Load/Load and replicate                                                        │ no          │ <conflicted
svand_m                     │ 0    │ sve        │ A64        │      │ Logical/AND                                                                    │ maybe       │ <conflicted
svand_x                     │ 0    │ sve        │ A64        │      │ Logical/AND                                                                    │ no          │ <conflicted
svand_z                     │ 0    │ sve        │ A64        │      │ Logical/AND                                                                    │ maybe       │ <conflicted
svandv                      │ 0    │ sve        │ A64        │      │ Logical/AND                                                                    │ no          │ <conflicted
svmov_z                     │ 0    │ sve        │ A64        │      │ Logical/AND                                                                    │ no          │ Move
svbic_m                     │ 0    │ sve        │ A64        │      │ Logical/AND-NOT                                                                │ maybe       │ <conflicted
svbic_x                     │ 0    │ sve        │ A64        │      │ Logical/AND-NOT                                                                │ no          │ <conflicted
svnot_m                     │ 0    │ sve        │ A64        │      │ Logical/Bitwise NOT                                                            │ maybe       │ <conflicted
svnot_x                     │ 0    │ sve        │ A64        │      │ Logical/Bitwise NOT                                                            │ maybe       │ <conflicted
svnot_z                     │ 0    │ sve        │ A64        │      │ Logical/Bitwise NOT                                                            │ maybe       │ <conflicted
sveor_m                     │ 0    │ sve        │ A64        │      │ Logical/Exclusive OR                                                           │ maybe       │ <conflicted
sveor_x                     │ 0    │ sve        │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ <conflicted
sveor_z                     │ 0    │ sve        │ A64        │      │ Logical/Exclusive OR                                                           │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
sveorv                      │ 0    │ sve        │ A64        │      │ Logical/Exclusive OR                                                           │ no          │ <conflicted
svcnot_m                    │ 0    │ sve        │ A64        │      │ Logical/Logical NOT                                                            │ maybe       │ <conflicted
svcnot_x                    │ 0    │ sve        │ A64        │      │ Logical/Logical NOT                                                            │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcnot_z                    │ 0    │ sve        │ A64        │      │ Logical/Logical NOT                                                            │ yes         │ <conflicted
svnand_z                    │ 0    │ sve        │ A64        │      │ Logical/NAND                                                                   │ no          │ Bitwise
svnor_z                     │ 0    │ sve        │ A64        │      │ Logical/NOR                                                                    │ no          │ Bitwise
svorr_m                     │ 0    │ sve        │ A64        │      │ Logical/OR                                                                     │ maybe       │ <conflicted
svorr_x                     │ 0    │ sve        │ A64        │      │ Logical/OR                                                                     │ no          │ <conflicted
svorr_z                     │ 0    │ sve        │ A64        │      │ Logical/OR                                                                     │ maybe       │ <conflicted
svorv                       │ 0    │ sve        │ A64        │      │ Logical/OR                                                                     │ no          │ <conflicted
svorn_z                     │ 0    │ sve        │ A64        │      │ Logical/OR-NOT                                                                 │ no          │ Bitwise inclusive OR, inverting second argument
svunpkhi                    │ 0    │ sve        │ A64        │      │ Move/Widen                                                                     │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svunpklo                    │ 0    │ sve        │ A64        │      │ Move/Widen                                                                     │ no          │ <conflicted
svcntp_b16                  │ 0    │ sve        │ A64        │      │ Predication/Counting/Count active elements                                     │ no          │ Count set predicate bits
svcntp_b32                  │ 0    │ sve        │ A64        │      │ Predication/Counting/Count active elements                                     │ no          │ Count set predicate bits
svcntp_b64                  │ 0    │ sve        │ A64        │      │ Predication/Counting/Count active elements                                     │ no          │ Count set predicate bits                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svcntp_b8                   │ 0    │ sve        │ A64        │      │ Predication/Counting/Count active elements                                     │ no          │ Count set predicate bits
svqdecp                     │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating decrement                                      │ maybe       │ <conflicted
svqdecp_b16                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating decrement                                      │ no          │ <conflicted
svqdecp_b32                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating decrement                                      │ no          │ <conflicted
svqdecp_b64                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating decrement                                      │ no          │ <conflicted
svqdecp_b8                  │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating decrement                                      │ no          │ <conflicted
svqincp                     │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating increment                                      │ maybe       │ <conflicted
svqincp_b16                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating increment                                      │ no          │ <conflicted
svqincp_b32                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating increment                                      │ no          │ <conflicted
svqincp_b64                 │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating increment                                      │ no          │ <conflicted
svqincp_b8                  │ 0    │ sve        │ A64        │      │ Predication/Counting/Saturating increment                                      │ no          │ <conflicted
svclasta                    │ 0    │ sve        │ A64        │      │ Predication/Element selection/Extract element after last active element        │ maybe       │ <conflicted
svlasta                     │ 0    │ sve        │ A64        │      │ Predication/Element selection/Extract element after last active element        │ no          │ <conflicted
svclastb                    │ 0    │ sve        │ A64        │      │ Predication/Element selection/Extract last active element                      │ maybe       │ <conflicted
svlastb                     │ 0    │ sve        │ A64        │      │ Predication/Element selection/Extract last active element                      │ no          │ <conflicted
svsel                       │ 0    │ sve        │ A64        │      │ Predication/Element selection/Select between two vectors                       │ no          │ <conflicted
svdup_b16                   │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ no          │ Broadcast a scalar value
svdup_b32                   │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ no          │ Broadcast a scalar value
svdup_b64                   │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ no          │ Broadcast a scalar value
svdup_b8                    │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ no          │ Broadcast a scalar value
svdupq_b16                  │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ comptime    │ Broadcast a quadword of scalars
svdupq_b32                  │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ comptime    │ Broadcast a quadword of scalars
svdupq_b64                  │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ comptime    │ Broadcast a quadword of scalars
svdupq_b8                   │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize from booleans                            │ comptime    │ Broadcast a quadword of scalars
svpfalse                    │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set all predicate elements to false
svptrue_b16                 │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_b32                 │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_b64                 │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_b8                  │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_pat_b16             │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svptrue_pat_b32             │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_pat_b64             │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svptrue_pat_b8              │ 0    │ sve        │ A64        │      │ Predication/Initialization/Initialize to pattern                               │ no          │ Set predicate elements to true
svwhilele_b16               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilele_b32               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilele_b64               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilele_b8                │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilelt_b16               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilelt_b32               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilelt_b64               │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svwhilelt_b8                │ 0    │ sve        │ A64        │      │ Predication/Initialization/While counter meets condition (forward)             │ no          │ <conflicted
svbrka_m                    │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Break after first true condition                      │ no          │ Break after first true condition
svbrkpa_z                   │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Break after first true condition                      │ no          │ Break after first true condition, propagating from previous partition
svbrkb_m                    │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Break before first true condition                     │ no          │ Break before first true condition
svbrkb_z                    │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Break before first true condition                     │ no          │ Break before first true condition
svbrkpb_z                   │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Break before first true condition                     │ no          │ Break before first true condition, propagating from previous partition
svbrkn_z                    │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Propagate break to next partition                     │ no          │ Propagate break to next partition                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
svpfirst                    │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Single-element partitioning                           │ no          │ Set the first active predicate element to true
svpnext_b16                 │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Single-element partitioning                           │ no          │ Find next active predicate
svpnext_b32                 │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Single-element partitioning                           │ no          │ Find next active predicate
svpnext_b64                 │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Single-element partitioning                           │ no          │ Find next active predicate
svpnext_b8                  │ 0    │ sve        │ A64        │      │ Predication/Partitioning/Single-element partitioning                           │ no          │ Find next active predicate
svptest_any                 │ 0    │ sve        │ A64        │      │ Predication/Testing                                                            │ comptime    │ Test whether any active element is true
svptest_first               │ 0    │ sve        │ A64        │      │ Predication/Testing                                                            │ comptime    │ Test whether the first active element is true
svptest_last                │ 0    │ sve        │ A64        │      │ Predication/Testing                                                            │ comptime    │ Test whether the last active element is true                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svprfb                      │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch bytes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svprfb_vnum                 │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch bytes
svprfd                      │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch doublewords
svprfd_vnum                 │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch doublewords
svprfh                      │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch halfwords
svprfh_vnum                 │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch halfwords
svprfw                      │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch words
svprfw_vnum                 │ 0    │ sve        │ A64        │      │ Prefetch/Consecutive                                                           │ no          │ Prefetch words
svprfb_gather               │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfb_gather_offset        │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfd_gather               │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfd_gather_index         │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfh_gather               │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfh_gather_index         │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svprfw_gather               │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svprfw_gather_index         │ 0    │ sve        │ A64        │      │ Prefetch/Gather                                                                │ no          │ <conflicted
svlsl_m                     │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ maybe       │ <conflicted
svlsl_wide_m                │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ maybe       │ <conflicted
svlsl_wide_x                │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ no          │ <conflicted
svlsl_wide_z                │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ yes         │ <conflicted
svlsl_x                     │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ maybe       │ <conflicted
svlsl_z                     │ 0    │ sve        │ A64        │      │ Shift/Left/Vector shift left                                                   │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svasr_m                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svasr_wide_m                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svasr_wide_x                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svasr_wide_z                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svasr_x                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svasr_z                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ yes         │ <conflicted
svasrd_m                    │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svasrd_x                    │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svasrd_z                    │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ yes         │ <conflicted
svlsr_m                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svlsr_wide_m                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svlsr_wide_x                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ no          │ <conflicted
svlsr_wide_z                │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ yes         │ <conflicted
svlsr_x                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ maybe       │ <conflicted
svlsr_z                     │ 0    │ sve        │ A64        │      │ Shift/Right/Vector shift right                                                 │ yes         │ <conflicted
svst1                       │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1_vnum                  │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1b                      │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svst1b_vnum                 │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1h                      │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1h_vnum                 │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1w                      │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svst1w_vnum                 │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst2                       │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svst2_vnum                  │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst3                       │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst3_vnum                  │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst4                       │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst4_vnum                  │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svstnt1                     │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svstnt1_vnum                │ 0    │ sve        │ A64        │      │ Store/Consecutive                                                              │ no          │ <conflicted
svst1_scatter               │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svst1_scatter_index         │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1_scatter_offset        │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1b_scatter              │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1b_scatter_offset       │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1h_scatter              │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svst1h_scatter_index        │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1h_scatter_offset       │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1w_scatter              │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1w_scatter_index        │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svst1w_scatter_offset       │ 0    │ sve        │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svtbl                       │ 0    │ sve        │ A64        │      │ Table lookups/Table lookup                                                     │ no          │ <conflicted
svabd_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ maybe       │ <conflicted
svabd_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ maybe       │ <conflicted
svabd_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute difference                                 │ yes         │ <conflicted
svabs_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ maybe       │ <conflicted
svabs_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svabs_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Absolute/Absolute value                                      │ yes         │ <conflicted
svadda                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Across vector arithmetic/Addition across vector              │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svmaxv                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector               │ no          │ <conflicted
svmaxnmv                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Across vector arithmetic/Maximum across vector (IEEE754)     │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svminv                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector               │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svminnmv                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Across vector arithmetic/Minimum across vector (IEEE754)     │ no          │ <conflicted
svadd_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted
svadd_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted
svadd_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ yes         │ <conflicted
svqadd                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svadrb_offset               │ 0    │ sve        │ A64        │      │ Vector arithmetic/Address calculation                                          │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svadrd_index                │ 0    │ sve        │ A64        │      │ Vector arithmetic/Address calculation                                          │ no          │ <conflicted
svadrh_index                │ 0    │ sve        │ A64        │      │ Vector arithmetic/Address calculation                                          │ no          │ <conflicted
svadrw_index                │ 0    │ sve        │ A64        │      │ Vector arithmetic/Address calculation                                          │ no          │ <conflicted
svdiv_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ maybe       │ <conflicted
svdiv_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ maybe       │ <conflicted
svdiv_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ yes         │ <conflicted
svdivr_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ maybe       │ <conflicted
svdivr_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svdivr_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Division                                                     │ yes         │ <conflicted
svdot                       │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ <conflicted
svdot_lane                  │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ <conflicted
svsudot                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ <conflicted
svsudot_lane                │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ Dot product (signed × unsigned
svusdot                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ <conflicted
svusdot_lane                │ 0    │ sve        │ A64        │      │ Vector arithmetic/Dot product                                                  │ maybe       │ Dot product (unsigned × signed
svexpa                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Exponent                                                     │ no          │ <conflicted
svscale_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Exponent                                                     │ maybe       │ <conflicted
svscale_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Exponent                                                     │ maybe       │ <conflicted
svscale_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Exponent                                                     │ yes         │ <conflicted
svmmla                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Matrix multiply                                              │ maybe       │ <conflicted
svusmmla                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Matrix multiply                                              │ maybe       │ Matrix multiply-accumulate (unsigned × signed
svmax_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ maybe       │ <conflicted
svmax_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ maybe       │ <conflicted
svmax_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ yes         │ <conflicted
svmaxnm_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ maybe       │ <conflicted
svmaxnm_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ maybe       │ <conflicted
svmaxnm_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Maximum                                                      │ yes         │ <conflicted
svmin_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ maybe       │ <conflicted
svmin_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ maybe       │ <conflicted
svmin_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ yes         │ <conflicted
svminnm_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ maybe       │ <conflicted
svminnm_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ maybe       │ <conflicted
svminnm_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Minimum                                                      │ yes         │ <conflicted
svnmad_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmad_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmad_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ yes         │ <conflicted
svnmla_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmla_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmla_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ yes         │ <conflicted
svnmls_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svnmls_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmls_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ yes         │ <conflicted
svnmsb_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmsb_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ maybe       │ <conflicted
svnmsb_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply-accumulate/Fused multiply-accumulate                │ yes         │ <conflicted
svmul_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ maybe       │ <conflicted
svmul_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ maybe       │ <conflicted
svmul_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ yes         │ <conflicted
svmulh_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ maybe       │ <conflicted
svmulh_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ maybe       │ <conflicted
svmulh_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiplication                                      │ yes         │ <conflicted
svmulx_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ maybe       │ <conflicted
svmulx_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ maybe       │ <conflicted
svmulx_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Multiply/Multiply extended                                   │ yes         │ <conflicted
svneg_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Negate/Negation                                              │ maybe       │ <conflicted
svneg_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Negate/Negation                                              │ maybe       │ <conflicted
svneg_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Negate/Negation                                              │ yes         │ <conflicted
svrecpe                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ no          │ <conflicted
svrecpx_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal exponent                               │ maybe       │ <conflicted
svrecpx_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal exponent                               │ maybe       │ <conflicted
svrecpx_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal exponent                               │ yes         │ <conflicted
svrsqrte                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ no          │ <conflicted
svrsqrts                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root step                       │ no          │ <conflicted
svrecps                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal step                                   │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrinta_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrinta_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrinta_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svrinti_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrinti_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrinti_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrintm_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintm_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintm_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svrintn_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintn_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintn_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svrintp_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintp_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintp_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svrintx_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintx_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrintx_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svrintz_m                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintz_x                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ maybe       │ <conflicted
svrintz_z                   │ 0    │ sve        │ A64        │      │ Vector arithmetic/Rounding                                                     │ yes         │ <conflicted
svsqrt_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Square root                                                  │ maybe       │ <conflicted
svsqrt_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Square root                                                  │ maybe       │ <conflicted
svsqrt_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Square root                                                  │ yes         │ <conflicted
svqsub                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ <conflicted
svsub_m                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svsub_x                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svsub_z                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ yes         │ <conflicted
svsubr_m                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svsubr_x                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svsubr_z                    │ 0    │ sve        │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ yes         │ <conflicted
svtmad                      │ 0    │ sve        │ A64        │      │ Vector arithmetic/Trigonometry                                                 │ maybe       │ <conflicted
svtsmul                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Trigonometry                                                 │ no          │ <conflicted
svtssel                     │ 0    │ sve        │ A64        │      │ Vector arithmetic/Trigonometry                                                 │ no          │ <conflicted
svcntb                      │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 8-bit elements in a vector
svcntb_pat                  │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 8-bit elements in a vector
svcntd                      │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 64-bit elements in a vector
svcntd_pat                  │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 64-bit elements in a vector
svcnth                      │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 16-bit elements in a vector
svcnth_pat                  │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 16-bit elements in a vector
svcntw                      │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 32-bit elements in a vector
svcntw_pat                  │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ Count the number of 32-bit elements in a vector
svlen                       │ 0    │ sve        │ A64        │      │ Vector length/Count elements                                                   │ no          │ <conflicted
svqdecb                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ no          │ <conflicted
svqdecb_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ no          │ <conflicted
svqdecd                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqdecd_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqdech                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqdech_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqdecw                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqdecw_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating decrement                                             │ maybe       │ <conflicted
svqincb                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ no          │ <conflicted
svqincb_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ no          │ <conflicted
svqincd                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svqincd_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svqinch                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svqinch_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svqincw                     │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svqincw_pat                 │ 0    │ sve        │ A64        │      │ Vector length/Saturating increment                                             │ maybe       │ <conflicted
svindex_s16                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_s32                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_s64                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_s8                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_u16                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_u32                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
svindex_u64                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svindex_u8                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create linear sequence                                     │ no          │ Create linear series
svundef_f32                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_f64                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_s16                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_s32                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_s64                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_s8                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_u16                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svundef_u32                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_u64                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svundef_u8                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector
svdupq_f32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_f64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
svdupq_lane                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ no          │ <conflicted
svdupq_s16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_s32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_s64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_s8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_u16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_u32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_u64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdupq_u8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svext                       │ 0    │ sve        │ A64        │      │ Vector manipulation/Extract vector from a pair of vectors                      │ maybe       │ <conflicted
svsplice                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Extract vector from a pair of vectors                      │ maybe       │ <conflicted
svinsr                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Insert element                                             │ no          │ <conflicted
svrbit_m                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ maybe       │ <conflicted
svrbit_x                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrbit_z                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse bits within elements                               │ yes         │ <conflicted
svrev                       │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ no          │ <conflicted
svrev_b16                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse all elements
svrev_b32                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse all elements
svrev_b64                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse all elements
svrev_b8                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ no          │ Reverse all elements
svrevb_m                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevb_x                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevb_z                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ yes         │ <conflicted
svrevh_m                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevh_x                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevh_z                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ yes         │ <conflicted
svrevw_m                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevw_x                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ maybe       │ <conflicted
svrevw_z                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Reverse elements                                           │ yes         │ <conflicted
svdup_f32                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f32_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f32_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svdup_f32_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svdup_f64                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svdup_f64_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f64_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f64_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_lane                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ <conflicted
svdup_s16                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s16_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s16_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s16_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_s32                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s32_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s32_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s32_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_s64                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svdup_s64_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s64_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s64_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_s8                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s8_m                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s8_x                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_s8_z                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_u16                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u16_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u16_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u16_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svdup_u32                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u32_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u32_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u32_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_u64                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u64_m                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u64_x                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u64_z                 │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svdup_u8                    │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u8_m                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u8_x                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_u8_z                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svtrn1                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ <conflicted
svtrn1_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave even elements from two inputs
svtrn1_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave even elements from two inputs
svtrn1_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave even elements from two inputs
svtrn1_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave even elements from two inputs
svtrn1q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ <conflicted
svtrn2                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ <conflicted
svtrn2_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave odd elements from two inputs
svtrn2_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave odd elements from two inputs
svtrn2_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave odd elements from two inputs
svtrn2_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ Interleave odd elements from two inputs
svtrn2q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Transpose elements                                         │ no          │ <conflicted
svuzp1                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ <conflicted
svuzp1_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate even elements from two inputs
svuzp1_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate even elements from two inputs
svuzp1_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate even elements from two inputs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
svuzp1_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate even elements from two inputs
svuzp1q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ <conflicted
svuzp2                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ <conflicted
svuzp2_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate odd elements from two inputs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
svuzp2_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate odd elements from two inputs
svuzp2_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate odd elements from two inputs
svuzp2_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ Concatenate odd elements from two inputs
svuzp2q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Unzip elements                                             │ no          │ <conflicted
svzip1                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ <conflicted
svzip1_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from low halves of two inputs
svzip1_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from low halves of two inputs                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
svzip1_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from low halves of two inputs
svzip1_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from low halves of two inputs
svzip1q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ <conflicted
svzip2                      │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ <conflicted
svzip2_b16                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from high halves of two inputs
svzip2_b32                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from high halves of two inputs
svzip2_b64                  │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from high halves of two inputs
svzip2_b8                   │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ Interleave elements from high halves of two inputs
svzip2q                     │ 0    │ sve        │ A64        │      │ Vector manipulation/Zip elements                                               │ no          │ <conflicted
svundef2_f32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_f64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_s16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_s32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_s64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_s8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_u16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_u32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_u64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef2_u8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef3_f32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_f64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_s16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_s32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_s64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_s8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_u16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_u32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svundef3_u64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef3_u8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef4_f32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svundef4_f64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_s16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svundef4_s32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_s64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_s8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_u16                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_u32                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_u64                │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svundef4_u8                 │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svcreate2                   │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create vector tuple                                  │ comptime    │ <conflicted
svcreate3                   │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create vector tuple                                  │ comptime    │ <conflicted
svcreate4                   │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Create vector tuple                                  │ comptime    │ <conflicted
svget2                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Extract vector from tuple                            │ comptime    │ <conflicted
svget3                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Extract vector from tuple                            │ comptime    │ <conflicted
svget4                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Extract vector from tuple                            │ comptime    │ <conflicted
svset2                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Set vector in tuple                                  │ comptime    │ <conflicted
svset3                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Set vector in tuple                                  │ comptime    │ <conflicted
svset4                      │ 0    │ sve        │ A64        │      │ Vector tuple manipulation/Set vector in tuple                                  │ comptime    │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcvt_bf16_m                │ 0    │ sve        │ A64        │ bf16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert
svcvt_bf16_x                │ 0    │ sve        │ A64        │ bf16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
svcvt_bf16_z                │ 0    │ sve        │ A64        │ bf16 │ Data type conversion/Conversions                                               │ yes         │ Floating-point convert
svcvtnt_bf16_m              │ 0    │ sve        │ A64        │ bf16 │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svcvtnt_bf16_x              │ 0    │ sve        │ A64        │ bf16 │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svbfdot                     │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Dot product                                                  │ maybe       │ <conflicted
svbfdot_lane                │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Dot product                                                  │ maybe       │ BFloat16 dot product
svbfmmla                    │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Matrix multiply                                              │ maybe       │ BFloat16 matrix multiply-accumulate                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
svbfmlalb                   │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svbfmlalb_lane              │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ BFloat16 multiply-add long to single-precision (bottom
svbfmlalt                   │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svbfmlalt_lane              │ 0    │ sve        │ A64        │ bf16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ BFloat16 multiply-add long to single-precision (top)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
svundef_bf16                │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svdupq_bf16                 │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdup_bf16                  │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_bf16_m                │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_bf16_x                │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_bf16_z                │ 0    │ sve        │ A64        │ bf16 │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svundef2_bf16               │ 0    │ sve        │ A64        │ bf16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef3_bf16               │ 0    │ sve        │ A64        │ bf16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef4_bf16               │ 0    │ sve        │ A64        │ bf16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svcvt_f16_m                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f16_x                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ <conflicted
svcvt_f16_z                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ yes         │ <conflicted
svcvt_s16_m                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert
svcvt_s16_x                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert
svcvt_s16_z                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ yes         │ Floating-point convert                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
svcvt_u16_m                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert
svcvt_u16_x                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ maybe       │ Floating-point convert
svcvt_u16_z                 │ 0    │ sve        │ A64        │ fp16 │ Data type conversion/Conversions                                               │ yes         │ Floating-point convert
svundef_f16                 │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Create uninitialized vector                                │ comptime    │ Create an uninitialized vector                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svdupq_f16                  │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Create vector                                              │ comptime    │ Broadcast a quadword of scalars
svdup_f16                   │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f16_m                 │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f16_x                 │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ no          │ Broadcast a scalar value
svdup_f16_z                 │ 0    │ sve        │ A64        │ fp16 │ Vector manipulation/Set all lanes to the same value                            │ maybe       │ Broadcast a scalar value
svundef2_f16                │ 0    │ sve        │ A64        │ fp16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of two vectors
svundef3_f16                │ 0    │ sve        │ A64        │ fp16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of three vectors
svundef4_f16                │ 0    │ sve        │ A64        │ fp16 │ Vector tuple manipulation/Create uninitialized vector tuple                    │ comptime    │ Create an uninitialized tuple of four vectors
svbext                      │ 0    │ sve2       │ A64        │      │ Bit manipulation/Gather bits                                                   │ no          │ <conflicted
svbgrp                      │ 0    │ sve2       │ A64        │      │ Bit manipulation/Group bits                                                    │ no          │ <conflicted
svbdep                      │ 0    │ sve2       │ A64        │      │ Bit manipulation/Scatter bits                                                  │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svhistcnt_z                 │ 0    │ sve2       │ A64        │      │ Compare multiple/Histogram acceleration                                        │ no          │ <conflicted
svhistseg                   │ 0    │ sve2       │ A64        │      │ Compare multiple/Histogram acceleration                                        │ no          │ <conflicted
svmatch                     │ 0    │ sve2       │ A64        │      │ Compare multiple/Search for matches                                            │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svnmatch                    │ 0    │ sve2       │ A64        │      │ Compare multiple/Search for matches                                            │ no          │ <conflicted
svcadd                      │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Complex addition                                            │ maybe       │ <conflicted
svcdot                      │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Complex dot product                                         │ maybe       │ <conflicted
svcdot_lane                 │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Complex dot product                                         │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svcmla                      │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Complex multiply-accumulate                                 │ maybe       │ <conflicted
svqcadd                     │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Saturating complex addition                                 │ maybe       │ <conflicted
svqrdcmlah                  │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Saturating complex multiply-accumulate                      │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svqrdcmlah_lane             │ 0    │ sve2       │ A64        │      │ Complex arithmetic/Saturating complex multiply-accumulate                      │ maybe       │ <conflicted
svcvtlt_f64_m               │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Up convert long (top
svcvtlt_f64_x               │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Up convert long (top
svcvtnt_f32_m               │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svcvtnt_f32_x               │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svcvtx_f32_m                │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ Down convert, rounding to odd
svcvtx_f32_x                │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ maybe       │ Down convert, rounding to odd
svcvtx_f32_z                │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ yes         │ Down convert, rounding to odd
svcvtxnt_f32_m              │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Down convert, rounding to odd (top
svcvtxnt_f32_x              │ 0    │ sve2       │ A64        │      │ Data type conversion/Conversions                                               │ no          │ Down convert, rounding to odd (top
svldnt1_gather_f32          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_f64          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_index        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1_gather_index_f32    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_index_f64    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_index_s32    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnt1_gather_index_s64    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_index_u32    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_index_u64    │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset       │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1_gather_offset_f32   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset_f64   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset_s32   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset_s64   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset_u32   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_offset_u64   │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_s32          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_s64          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_u32          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1_gather_u64          │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Unextended load, non-temporal
svldnt1sb_gather_offset_s32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sb_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sb_gather_offset_u32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sb_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sb_gather_s32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend, non-temporal
svldnt1sb_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend, non-temporal
svldnt1sb_gather_u32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend, non-temporal
svldnt1sb_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and sign-extend, non-temporal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnt1sh_gather_index_s32  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal
svldnt1sh_gather_index_s64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sh_gather_index_u32  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
svldnt1sh_gather_index_u64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sh_gather_offset_s32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sh_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sh_gather_offset_u32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svldnt1sh_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sh_gather_s32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal
svldnt1sh_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal
svldnt1sh_gather_u32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal
svldnt1sh_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and sign-extend, non-temporal
svldnt1sw_gather_index_s64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sw_gather_index_u64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sw_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sw_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1sw_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and sign-extend, non-temporal
svldnt1sw_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and sign-extend, non-temporal
svldnt1ub_gather_offset_s32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1ub_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1ub_gather_offset_u32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1ub_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1ub_gather_s32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend, non-temporal
svldnt1ub_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend, non-temporal
svldnt1ub_gather_u32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend, non-temporal
svldnt1ub_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 8-bit data and zero-extend, non-temporal                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
svldnt1uh_gather_index_s32  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uh_gather_index_s64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uh_gather_index_u32  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uh_gather_index_u64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uh_gather_offset_s32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uh_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uh_gather_offset_u32 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uh_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svldnt1uh_gather_s32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uh_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uh_gather_u32        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uh_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 16-bit data and zero-extend, non-temporal
svldnt1uw_gather_index_s64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uw_gather_index_u64  │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svldnt1uw_gather_offset_s64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svldnt1uw_gather_offset_u64 │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ <conflicted
svldnt1uw_gather_s64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and zero-extend, non-temporal
svldnt1uw_gather_u64        │ 0    │ sve2       │ A64        │      │ Load/Gather                                                                    │ no          │ Load 32-bit data and zero-extend, non-temporal
svbcax                      │ 0    │ sve2       │ A64        │      │ Logical/Bit clear and exclusive OR                                             │ maybe       │ <conflicted
svbsl                       │ 0    │ sve2       │ A64        │      │ Logical/Bitwise select                                                         │ maybe       │ <conflicted
svbsl1n                     │ 0    │ sve2       │ A64        │      │ Logical/Bitwise select                                                         │ maybe       │ <conflicted
svbsl2n                     │ 0    │ sve2       │ A64        │      │ Logical/Bitwise select                                                         │ maybe       │ <conflicted
svnbsl                      │ 0    │ sve2       │ A64        │      │ Logical/Bitwise select                                                         │ maybe       │ <conflicted
sveor3                      │ 0    │ sve2       │ A64        │      │ Logical/Exclusive OR                                                           │ maybe       │ <conflicted
sveorbt                     │ 0    │ sve2       │ A64        │      │ Logical/Exclusive OR                                                           │ maybe       │ <conflicted
sveortb                     │ 0    │ sve2       │ A64        │      │ Logical/Exclusive OR                                                           │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svxar                       │ 0    │ sve2       │ A64        │      │ Logical/Exclusive OR and rotate                                                │ maybe       │ <conflicted
svrax1                      │ 0    │ sve2       │ A64        │      │ Logical/Rotate and exclusive OR                                                │ no          │ <conflicted
svqxtnb                     │ 0    │ sve2       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ <conflicted
svqxtnt                     │ 0    │ sve2       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ <conflicted
svqxtunb                    │ 0    │ sve2       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ <conflicted
svqxtunt                    │ 0    │ sve2       │ A64        │      │ Move/Saturating narrow                                                         │ no          │ <conflicted
svmovlb                     │ 0    │ sve2       │ A64        │      │ Move/Widen                                                                     │ no          │ <conflicted
svmovlt                     │ 0    │ sve2       │ A64        │      │ Move/Widen                                                                     │ no          │ <conflicted
svwhilerw                   │ 0    │ sve2       │ A64        │      │ Predication/Initialization/Detect hazards                                      │ no          │ <conflicted
svwhilewr                   │ 0    │ sve2       │ A64        │      │ Predication/Initialization/Detect hazards                                      │ no          │ <conflicted
svwhilege_b16               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilege_b32               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilege_b64               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilege_b8                │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilegt_b16               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilegt_b32               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svwhilegt_b64               │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svwhilegt_b8                │ 0    │ sve2       │ A64        │      │ Predication/Initialization/While counter meets condition (backward)            │ no          │ <conflicted
svrshl_m                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector rounding shift left                                          │ maybe       │ <conflicted
svrshl_x                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector rounding shift left                                          │ maybe       │ <conflicted
svrshl_z                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector rounding shift left                                          │ yes         │ <conflicted
svqrshl_m                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ maybe       │ <conflicted
svqrshl_x                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ maybe       │ <conflicted
svqrshl_z                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating rounding shift left                               │ yes         │ <conflicted
svqshl_m                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ maybe       │ <conflicted
svqshl_x                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ maybe       │ <conflicted
svqshl_z                    │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svqshlu_m                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ maybe       │ <conflicted
svqshlu_x                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ maybe       │ <conflicted
svqshlu_z                   │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector saturating shift left                                        │ yes         │ <conflicted
svsli                       │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector shift left and insert                                        │ no          │ <conflicted
svshllb                     │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ <conflicted
svshllt                     │ 0    │ sve2       │ A64        │      │ Shift/Left/Vector shift left and widen                                         │ no          │ <conflicted
svrshr_m                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right                                        │ maybe       │ <conflicted
svrshr_x                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right                                        │ maybe       │ <conflicted
svrshr_z                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right                                        │ yes         │ <conflicted
svrsra                      │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right and accumulate                         │ maybe       │ <conflicted
svrshrnb                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ <conflicted
svrshrnt                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector rounding shift right and narrow                             │ no          │ <conflicted
svqrshrnb                   │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ <conflicted
svqrshrnt                   │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ <conflicted
svqrshrunb                  │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ <conflicted
svqrshrunt                  │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating rounding shift right and narrow                  │ no          │ <conflicted
svqshrnb                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ <conflicted
svqshrnt                    │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ <conflicted
svqshrunb                   │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ <conflicted
svqshrunt                   │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector saturating shift right and narrow                           │ no          │ <conflicted
svsra                       │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector shift right and accumulate                                  │ maybe       │ <conflicted
svsri                       │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector shift right and insert                                      │ no          │ <conflicted
svshrnb                     │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ <conflicted
svshrnt                     │ 0    │ sve2       │ A64        │      │ Shift/Right/Vector shift right and narrow                                      │ no          │ <conflicted
svstnt1_scatter             │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1_scatter_index       │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1_scatter_offset      │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1b_scatter            │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1b_scatter_offset     │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1h_scatter            │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svstnt1h_scatter_index      │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1h_scatter_offset     │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1w_scatter            │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1w_scatter_index      │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svstnt1w_scatter_offset     │ 0    │ sve2       │ A64        │      │ Store/Scatter                                                                  │ no          │ <conflicted
svtbx                       │ 0    │ sve2       │ A64        │      │ Table lookups/Extended table lookup                                            │ no          │ <conflicted
svtbl2                      │ 0    │ sve2       │ A64        │      │ Table lookups/Table lookup                                                     │ no          │ <conflicted
svaba                       │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Absolute difference and accumulate                  │ maybe       │ <conflicted
svqabs_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ maybe       │ <conflicted
svqabs_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ maybe       │ <conflicted
svqabs_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Saturating absolute value                           │ yes         │ <conflicted
svabdlb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ <conflicted
svabdlt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference                        │ no          │ <conflicted
svabalb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ maybe       │ <conflicted
svabalt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Absolute/Widening absolute difference and accumulate         │ maybe       │ <conflicted
svhadd_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted
svhadd_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svhadd_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ yes         │ <conflicted
svrhadd_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svrhadd_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ maybe       │ <conflicted
svrhadd_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition                                                 │ yes         │ <conflicted
svadclb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition with carry                                      │ maybe       │ <conflicted
svadclt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Addition with carry                                      │ maybe       │ <conflicted
svaddhnb                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ <conflicted
svaddhnt                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ <conflicted
svraddhnb                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ <conflicted
svraddhnt                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Narrowing addition                                       │ no          │ <conflicted
svqadd_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ maybe       │ <conflicted
svqadd_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ no          │ <conflicted
svqadd_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ yes         │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svsqadd_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ maybe       │ <conflicted
svsqadd_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ maybe       │ <conflicted
svsqadd_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ yes         │ <conflicted
svuqadd_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ maybe       │ <conflicted
svuqadd_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ maybe       │ <conflicted
svuqadd_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Saturating addition                                      │ yes         │ <conflicted
svaddlb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ <conflicted
svaddlbt                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ <conflicted
svaddlt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ <conflicted
svaddwb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ <conflicted
svaddwt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Add/Widening addition                                        │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svlogb_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Logarithm                                                    │ maybe       │ <conflicted
svlogb_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Logarithm                                                    │ maybe       │ <conflicted
svlogb_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Logarithm                                                    │ yes         │ <conflicted
svqrdmlah                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate           │ maybe       │ <conflicted
svqrdmlah_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate           │ maybe       │ <conflicted
svqrdmlsh                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate           │ maybe       │ <conflicted
svqrdmlsh_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate           │ maybe       │ <conflicted
svqdmlalb                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlalb_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlalbt                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlalt                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlalt_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlslb                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlslb_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlslbt                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlslt                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmlslt_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply-accumulate/Saturating multiply-accumulate and widen │ maybe       │ <conflicted
svqdmulh                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svqdmulh_lane               │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ <conflicted
svqrdmulh                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ <conflicted
svqrdmulh_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply                                 │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svqdmullb                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply and widen                       │ no          │ <conflicted
svqdmullb_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply and widen                       │ no          │ <conflicted
svqdmullt                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply and widen                       │ no          │ <conflicted
svqdmullt_lane              │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Saturating multiply and widen                       │ no          │ <conflicted
svmullb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ <conflicted
svmullb_lane                │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ <conflicted
svmullt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ <conflicted
svmullt_lane                │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Multiply/Widening multiplication                             │ no          │ <conflicted
svqneg_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Negate/Saturating negation                                   │ maybe       │ <conflicted
svqneg_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Negate/Saturating negation                                   │ maybe       │ <conflicted
svqneg_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Negate/Saturating negation                                   │ yes         │ <conflicted
svaddp_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ maybe       │ <conflicted
svaddp_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition                        │ maybe       │ <conflicted
svadalp_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ maybe       │ <conflicted
svadalp_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ maybe       │ <conflicted
svadalp_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise addition and widen              │ yes         │ <conflicted
svmaxp_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ maybe       │ <conflicted
svmaxp_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum                         │ maybe       │ <conflicted
svmaxnmp_m                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum (IEEE754)               │ maybe       │ <conflicted
svmaxnmp_x                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise maximum (IEEE754)               │ maybe       │ <conflicted
svminp_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ maybe       │ <conflicted
svminp_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum                         │ maybe       │ <conflicted
svminnmp_m                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ maybe       │ <conflicted
svminnmp_x                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Pairwise arithmetic/Pairwise minimum (IEEE754)               │ maybe       │ <conflicted
svpmul                      │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ <conflicted
svpmullb                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ <conflicted
svpmullb_pair               │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ <conflicted>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
svpmullt                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ <conflicted
svpmullt_pair               │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Polynomial/Polynomial multiply                               │ no          │ <conflicted
svrecpe_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ maybe       │ Reciprocal estimate
svrecpe_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ maybe       │ Reciprocal estimate
svrecpe_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal estimate                               │ yes         │ Reciprocal estimate
svrsqrte_m                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ maybe       │ Reciprocal square root estimate
svrsqrte_x                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ maybe       │ Reciprocal square root estimate
svrsqrte_z                  │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Reciprocal/Reciprocal square-root estimate                   │ yes         │ Reciprocal square root estimate
svrsubhnb                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ <conflicted
svrsubhnt                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ <conflicted
svsubhnb                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ <conflicted
svsubhnt                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Narrowing subtraction                               │ no          │ <conflicted
svqsub_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ maybe       │ <conflicted
svqsub_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ <conflicted
svqsub_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ yes         │ <conflicted
svqsubr_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ maybe       │ <conflicted
svqsubr_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ no          │ <conflicted
svqsubr_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Saturating subtract                                 │ yes         │ <conflicted
svhsub_m                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svhsub_x                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svhsub_z                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ yes         │ <conflicted
svhsubr_m                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svhsubr_x                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ maybe       │ <conflicted
svhsubr_z                   │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction                                         │ yes         │ <conflicted
svsbclb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction with borrow                             │ maybe       │ <conflicted
svsbclt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Subtraction with borrow                             │ maybe       │ <conflicted
svsublb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svsublbt                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svsublt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svsubltb                    │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svsubwb                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svsubwt                     │ 0    │ sve2       │ A64        │      │ Vector arithmetic/Subtract/Widening subtraction                                │ no          │ <conflicted
svcvtlt_f32_m               │ 0    │ sve2       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Up convert long (top
svcvtlt_f32_x               │ 0    │ sve2       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Up convert long (top
svcvtnt_f16_m               │ 0    │ sve2       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svcvtnt_f16_x               │ 0    │ sve2       │ A64        │ fp16 │ Data type conversion/Conversions                                               │ no          │ Down convert and narrow (top
svmlalb                     │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlalb_lane                │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlalt                     │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlalt_lane                │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlslb                     │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlslb_lane                │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlslt                     │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
svmlslt_lane                │ 0    │ sve2       │ A64        │ fp16 │ Vector arithmetic/Multiply-accumulate/Multiply-accumulate and widen            │ maybe       │ <conflicted
